@{
    ViewData["Title"] = "Register User";
}

<div id="Registration" class="d-flex flex-column">
    <div class="text-center">
        <h1 class="display-4">Register User</h1>
    </div>

    <form class="d-flex flex-column" role="register" v-on:submit.prevent="register">
        <div>
            <div class="alert alert-danger" v-if="unknownError.length">
                {{unknownError}}
            </div>

            <label for="username">username</label>
            <input name="username" v-model="newUser.userName" placeholder="username" required>
            <div class="alert alert-danger" v-if="usernameError.length">
                {{usernameError}}
            </div>
        </div>
        <div>
            <label for="password">password</label>
            <input name="password" v-model="newUser.password" placeholder="password" type="password" required>
            <div class="alert alert-danger" v-if="passwordError.length">
                {{passwordError}}
            </div>
        </div>
        <div>
            <label for="password">Confirm Password</label>
            <input name="confirmPassword" v-model="newUser.confirmPassword" placeholder="password" type="password" required>
            <div class="alert alert-danger" v-if="confirmPasswordError.length">
                {{confirmPasswordError}}
            </div>
        </div>
        <div>
            <label for="firstName">first name</label>
            <input name="firstName" v-model="newUser.firstName" placeholder="first name" required>
        </div>
        <div>
            <label for="lastName">last name</label>
            <input name="lastName" v-model="newUser.lastName" placeholder="last name" required>
        </div>
        <div>
            <label for="birthday">Birthday</label>
            <input id="birthday" class="birthday" name="birthDay" v-model="newUser.birthDay" type="date" min="1900-01-01" required>
        </div>
        <div>
            <label for="email">E-mail</label>
            <input name="email" v-model="newUser.email" placeholder="e-mail@email.com" type="email" required>
            <div class="alert alert-danger" v-if="emailError.length">
                {{emailError}}
            </div>
        </div>
        <div>
            <label for="approvedTerms">Did you approve our terms and service?</label>
            <input name="approved" v-model="newUser.approvedTerms" type="checkbox">
        </div>
        <button id="Register" class="btn btn-outline-success" type="submit">Register</button>
        </form>
    <div id="Succes" class="alert alert-success" hidden>
        Succesfully registered in, please log in.
        </div>
    </div>


@section Scripts{
    <script>
        var vue = new Vue({
            el: "#Registration",
            name: "registration",
            data: {
                usernameError: "",
                passwordError: "",
                confirmPasswordError: "",
                emailError: "",
                unknownError: "",

                newUser: {
                    password: "",
                    confirmPassword: "",
                    userName: "",
                    firstName: "",
                    lastName: "",
                    email: "",
                    approvedTerms: false,
                    birthDay: new Date().toISOString().split('T')[0]
                }

            },
            created: function () {
                birthday.max = new Date().toISOString().split("T")[0];
                birthday.value = new Date().toISOString().split("T")[0];
            },
            methods: {
                register: async function () {
                    this.usernameError = "";
                    this.passwordError = "";
                    this.confirmPasswordError = "";
                    this.emailError = "";
                    this.unknownError = "";

                    if (this.newUser.password != this.newUser.confirmPassword) {
                        this.confirmPasswordError = "Password isn't the same";
                    }
                    else {
                        if (this.passwordValidator(this.newUser.password)) {
                        await axios.post(`${baseUrl}authentication/register`, this.newUser)
                            .then((response) => {
                                let allInputs = document.getElementById('Registration').getElementsByTagName('input');

                                for (let i = 0; i < allInputs.length; i++) {
                                    allInputs[i].disabled = true;
                                }

                                let registerButton = document.getElementById('Register');
                                Register.disabled = true;

                                let registerSucces = document.getElementById('Succes');
                                registerSucces.hidden=false;
                            })
                            .catch((e) => {
                                if (e.response.status === 400) {
                                    e.response.data.forEach(this.setError);
                                }
                            });
                            }
                    }
                },

                setError: function (data) {
                    switch (data.errorMessage.split(' ')[0]) {
                        case `Username`:

                                this.usernameError =data.errorMessage;
                            break;
                        case `Password`:

                            this.passwordError = data.errorMessage;
                            
                            break;
                        case `Email`:

                            this.emailError = data.errorMessage;
                            
                            break;
                        default:

                            this.unknownError = data.errorMessage;
                            
                            break;
                    }
                },

                passwordValidator: function (password) {
                    if (password.length < 8) {
                        this.passwordError += "Your password must be at least 8 characters";
                        return false;
                    }
                    if (!password.match(/[a-z]/)) {
                        this.passwordError += "Your password must contain at least one small letter.";
                        return false;
                    }
                    if (!password.match(/[A-Z]/)) {
                        this.passwordError += "Your password must contain at least one big letter.";
                        return false;

                    }
                    if (!password.match(/[0-9]/)) {
                        this.passwordError += "Your password must contain at least one digit.";
                        return false;

                    }
                    if (!password.match(/[0-9]/)) {
                        this.passwordError += "Your password must contain at least one digit.";
                        return false;

                    }
                    if (!password.match(/[$&+?<>.^*()%!]/)) {
                        this.passwordError += "Your password must contain at least one special character.";
                        return false;
                    }
                    return true;
                }

            }
        });
    </script>
    }