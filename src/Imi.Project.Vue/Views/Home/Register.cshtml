@{
    ViewData["Title"] = "Register User";
}

<div id="Registration" class="d-flex flex-column">
    <div class="text-center">
        <h1 class="display-4">Register User</h1>
    </div>

    <form class="d-flex flex-column" role="register" v-on:submit.prevent="register">
        <div>
            <label for="username">username</label>
            <input name="username" v-model="newUser.userName" placeholder="username" required>
            <div v-for="error in usernameError" class="alert alert-danger" v-if="usernameError.length">
                {{error}}
            </div>
        </div>
        <div>
            <label for="password">password</label>
            <input name="password" v-model="newUser.password" placeholder="password" type="password" required>
            <div v-for="error in passwordError" class="alert alert-danger" v-if="passwordError.length">
                {{error}}
            </div>
        </div>
        <div>
            <label for="password">Confirm Password</label>
            <input name="confirmPassword" v-model="newUser.confirmPassword" placeholder="password" type="password" required>
            <div v-for="error in confirmPasswordError" class="alert alert-danger" v-if="confirmPasswordError.length">
                {{error}}
            </div>
        </div>
        <div>
            <label for="firstName">first name</label>
            <input name="firstName" v-model="newUser.firstName" placeholder="first name" required>
        </div>
        <div>
            <label for="lastName">last name</label>
            <input name="lastName" v-model="newUser.lastName" placeholder="last name" required>
        </div>
        <div>
            <label for="birthday">Birthday</label>
            <input id="birthday" class="birthday" name="birthDay" v-model="newUser.birthDay" type="date" min="1900-01-01" required>
        </div>
        <div>
            <label for="email">E-mail</label>
            <input name="email" v-model="newUser.email" placeholder="e-mail@email.com" type="email" required>
            <div v-for="error in emailError" class="alert alert-danger" v-if="emailError.length">
                {{error}}
            </div>
        </div>
        <div>
            <label for="approvedTerms">Did you approve our terms and service?</label>
            <input name="approved" v-model="newUser.approvedTerms" type="checkbox">
            <div v-for="error in unknownError" class="alert alert-danger" v-if="unknownError.length">
                {{error}}
            </div>
        </div>
        <button id="Register" class="btn btn-outline-success" type="submit">Register</button>
        </form>
    <div id="Succes" class="alert alert-success" hidden>
        Succesfully registered in, please log in.
        </div>
    </div>


@section Scripts{
    <script>
        var vue = new Vue({
            el: "#registration",
            name: "registration",
            data: {
                usernameError: new Array(),
                passwordError: new Array(),
                confirmPasswordError: new Array(),
                emailError: new Array(),
                unknownError: new Array(),

                newUser: {
                    password: "",
                    confirmPassword: "",
                    userName: "",
                    firstName: "",
                    lastName: "",
                    email: "",
                    approvedTerms: false,
                    birthDay: new Date().toISOString().split('T')[0]
                }

            },
            created: function () {
                birthday.max = new Date().toISOString().split("T")[0];
                birthday.value = new Date().toISOString().split("T")[0];
            },
            methods: {
                register: async function () {
                    this.usernameError = new Array();
                    this.passwordError = new Array();
                    this.confirmPasswordError = new Array();
                    this.emailError = new Array();
                    this.unknownError = new Array();

                    if (this.newUser.password != this.newUser.confirmPassword) {
                        if (!this.confirmPasswordError.length) {
                            this.confirmPasswordError.push("Password isn't the same");
                        }
                        else {
                            this.confirmPasswordError = new Array("Password isn't the same");
                        }
                    }
                    else {
                        await axios.post(`${baseUrl}authentication/register`, this.newUser)
                            .then((response) => {
                                let allInputs = document.getElementById('Registration').getElementsByTagName('input');

                                for (let i = 0; i < allInputs.length; i++) {
                                    allInputs[i].disabled = true;
                                }

                                let registerButton = document.getElementById('Register');
                                Register.disabled = true;

                                let registerSucces = document.getElementById('Succes');
                                registerSucces.hidden=false;
                            })
                            .catch((e) => {
                                if (e.response.status === 400) {
                                    e.response.data.forEach(this.setError);
                                }
                            });
                    }
                },

                setError: function (data) {
                    switch (data.split(' ')[0]) {
                        case `Username`:
                            if (!this.usernameError.length) {
                                this.usernameError.push(data);
                            }
                            else {
                                this.usernameError = new Array(data)
                            }
                            break;
                        case `Password`:
                            if (!this.passwordError.length) {
                                this.passwordError.push(data);
                            }
                            else {
                                this.passwordError = new Array(data)
                            }
                            break;
                        case `Email`:
                            if (!this.emailError.length) {
                                this.emailError.push(data);
                            }
                            else {
                                this.emailError = new Array(data)
                            }
                            break;
                        default:
                            if (!this.unknownError.length) {
                                this.unknownError.push(data);
                            }
                            else {
                                this.unknownError = new Array(data)
                            }
                            break;
                    }
                },

            }
        });
    </script>
    }