@{
    ViewData["Title"] = "Games pagina";
}

<div id="app">
    <h1 class="d-flex justify-content-center flex-column text-center display-4">Games beheer</h1>
    <div class="alert alert-danger text-center" v-if="errorMessage.length">
        {{errorMessage}}
    </div>
    <div class="d-flex flex-column" v-else>
        <button class="btn btn-outline-primary mb-3 row" v-on:click="showCreate" data-bs-toggle="modal" data-bs-target="#createGameModal">Nieuwe game</button>
        <div class="d-flex justify-content-center row">
            <input type="text" v-model="searchGames" class="form-control mb-3" placeholder="Zoek games..." v-on:input="showGames" />
            <div v-if="isLoading">
                <div class="d-flex justify-content-center">
                    <div class="spinner-border" role="status">
                        <span class="sr-only">Laden...</span>
                    </div>
                </div>
            </div>
            <table class="table table-bordered table-striped align-middle" v-else>
                <thead>
                    <tr>
                        <th>Naam</th>
                        <th>Prijs</th>
                        <th>Publisher</th>
                        <th>Genres</th>
                        <th>Gebruikers</th>
                        <th>Aanpassen/Verwijderen</th>
                    </tr>
                </thead>
                <tbody>
                    <tr v-for="game in games">
                        <td class="align-middle">{{game.name}}</td>
                        <td class="align-middle">€ {{game.price}}</td>
                        <td class="align-middle">{{game.publisher.name}}</td>
                        <td class="align-middle">
                            <ul class="m-0 pl-4">
                                <li v-for="genre in game.genres">
                                    {{genre.name}}
                                </li>
                            </ul>
                        </td>
                        <td class="align-middle">
                            <ul class="m-0 pl-4">
                                <li v-for="user in game.users">
                                    {{user}}
                                </li>
                            </ul>
                        </td>
                        <td class="align-middle text-center m-0">
                            <div class="btn-group-vertical btn-block">
                                <button class="btn btn-warning mb-2" v-on:click="showUpdate(game)" data-bs-toggle="modal" data-bs-target="#updateGameModal">Bewerken</button>
                                <button class="btn btn-danger mb-2" v-on:click="showDelete(game)" data-bs-toggle="modal" data-bs-target="#deleteGameModal">Verwijderen</button>
                            </div>
                        </td>
                    </tr>
                </tbody>
            </table>
        </div>
    </div>

    <div class="modal fade" id="createGameModal" data-bs-backdrop="static" data-bs-keyboard="false" tabindex="-1" aria-labelledby="staticBackdropLabel" aria-hidden="true">
        <div class="modal-dialog">
            <div class="modal-content">
                <div class="modal-header">
                    <h5 class="modal-title" id="staticBackdropLabel">Nieuwe game</h5>
                </div>
                <div class="modal-body">
                    <label>Naam:</label>
                    <input type="text" class="form-control" placeholder="Naam game" v-model="newGame.name" required />
                    <div class="alert alert-danger alert alert-danger mt-2" v-if="errorName.length">
                        {{errorName}}
                    </div>
                    <label>Prijs:</label>
                    <input type="number" min="0.01" class="form-control" placeholder="Prijs game" v-model="newGame.price" required />
                    <div class="alert alert-danger alert alert-danger mt-2" v-if="errorPrice.length">
                        {{errorPrice}}
                    </div>
                    <label>Publisher:</label>
                    <select id="publishersSelect" v-model="newGame.publisherId" data-mdb-placeholder="Select a publisher" class="form-control" required>
                        <option v-for="singlepublisher in publishers" :value="singlepublisher.id">{{ singlepublisher.name }}</option>
                    </select>
                    <div class="alert alert-danger alert alert-danger mt-2" v-if="errorPublisher.length">
                        {{errorPublisher}}
                    </div>
                    <label>Genres:</label>
                    <select id="genresSelectCreate" v-model="newGame.genreId" class="form-control" multiple>
                        <option v-for="genre in genres" :value="genre.id">{{genre.name}}</option>
                    </select>
                </div>
                <div class="modal-footer">
                    <button type="button" class="btn btn-outline-secondary" data-bs-dismiss="modal" v-on:click="cancelGame">Annuleren</button>
                    <button type="button" class="btn btn-outline-primary" v-on:click="createGame">Opslaan</button>
                </div>
            </div>
        </div>
    </div>

    <div class="modal fade" id="updateGameModal" data-bs-backdrop="static" data-bs-keyboard="false" tabindex="-1" aria-labelledby="staticBackdropLabel" aria-hidden="true">
        <div class="modal-dialog">
            <div class="modal-content">
                <div class="modal-header">
                    <h5 class="modal-title" id="staticBackdropLabel">Bewerken {{editGameName}}</h5>
                </div>
                <div class="modal-body">
                    <label>Naam:</label>
                    <input type="text" class="form-control" placeholder="Naam game" v-model="selectedGame.name" required />
                    <div class="alert alert-danger alert alert-danger mt-2" v-if="errorName.length">
                        {{errorName}}
                    </div>
                    <label>Prijs:</label>
                    <input type="number" min="0.01" class="form-control" placeholder="Prijs game" v-model="selectedGame.price" required />
                    <div class="alert alert-danger alert alert-danger mt-2" v-if="errorPrice.length">
                        {{errorPrice}}
                    </div>
                    <label>Publisher:</label>
                    <select id="publishersSelect" v-model="selectedGame.publisherId" required>
                        <option v-for="publisher in publishers" :value="publisher.id">{{ publisher.name }}</option>
                    </select>
                    <div class="alert alert-danger alert alert-danger mt-2" v-if="errorPublisher.length">
                        {{errorPublisher}}
                    </div>
                    <label>Genres:</label>
                    <select id="genresSelectUpdate" v-model="selectedGame.genreId" class="selectpicker" data-selected-text-format="count > 3" data-live-search="true" multiple>
                        <option v-for="genre in genres" :value="genre.id">{{genre.name}}</option>
                    </select>
                </div>
                <div class="modal-footer">
                    <button type="button" class="btn btn-outline-secondary" data-bs-dismiss="modal" v-on:click="cancelGame">Annuleren</button>
                    <button type="button" class="btn btn-outline-primary" v-on:click="updateGame(selectedGame)">Opslaan</button>
                </div>
            </div>
        </div>
    </div>

    <div class="modal fade" id="deleteGameModal" data-bs-backdrop="static" data-bs-keyboard="false" tabindex="-1" aria-labelledby="staticBackdropLabel" aria-hidden="true">
        <div class="modal-dialog">
            <div class="modal-content">
                <div class="modal-header">
                    <h5 class="modal-title" id="staticBackdropLabel">Verwijderen {{selectedGame.name}}?</h5>
                </div>
                <div class="modal-body">
                    Weet je zeker dat je de game <strong>{{selectedGame.name}}</strong> wilt verwijderen?
                </div>
                <div class="modal-footer">
                    <button type="button" class="btn btn-outline-secondary" data-bs-dismiss="modal" v-on:click="cancelGame">Annuleren</button>
                    <button type="button" class="btn btn-outline-primary" v-on:click="deleteGame(selectedGame)">Verwijderen</button>
                </div>
            </div>
        </div>
    </div>
</div>

@section Scripts{
    <script>
        var vue = new Vue({
            el: "#app",
            data: {
                errorName: "",
                errorPrice: "",
                errorPublisher: "",
                errorMessage: "",
                searchGames: "",
                isLoading: false,
                games: null,
                genres: null,
                publishers: null,
                dropdownCreate: null,
                dropdownUpdate: null,
                editGameName: "",
                newGame: {
                    name: "",
                    price: 1,
                    publisherId: "",
                    genreId: [""]
                },
                selectedGame: {
                    id: "",
                    name: "",
                    price: 1,
                    publisherId: "",
                    genreId: [""]
                }
            },
            created: async function () {
                await this.showGames();
                await this.getGenres();
                this.dropdownCreate = new vanillaSelectBox("#genresSelectCreate", {
                    maxWidth: 500,
                    maxHeight: 400,
                    minWidth: -1,
                });

                this.dropdownUpdate = new vanillaSelectBox("#genresSelectUpdate", {
                    maxWidth: 500,
                    maxHeight: 400,
                    minWidth: -1,
                });
            },
            methods: {
                showGames: async function () {
                    this.isLoading = true;

                    let trimmedSearch = this.searchGames.trimEnd();
                    trimmedSearch = trimmedSearch.trimStart();

                    let searchText = `${baseUrl}game`;

                    if (trimmedSearch != "") {
                        searchText = `${baseUrl}game/${trimmedSearch}/name`;
                    }

                    await axios.get(searchText, axiosConfig)
                        .then((response) => {
                            this.games = JSON.parse(JSON.stringify(response.data));
                        })
                        .catch((e) => {
                            this.errorMessage = e.message
                        });

                    let allUsers = null;

                    await axios.get(`${baseUrl}user`, axiosConfig)
                        .then((response) => {
                            allUsers = JSON.parse(JSON.stringify(response.data));
                        })
                        .catch((e) => {
                            if (e.response.status === 401) {
                                this.errorMessage = "You don't have the valid authentication to get the users.";
                            }
                            else if (e.response.status === 400) {
                                this.errorMessage = e.response.data[0].errorMessage;
                            }
                            else {
                                this.errorMessage = e.message;
                            }
                        })
                        .finally(() => {
                            for (const game of this.games) {
                                game.users = new Array();
                                allUsers.forEach(user => {
                                    let username = "";
                                    if (user.games.some(Usergame => Usergame.id === game.id)) {
                                        username = user.userName;
                                        if (game.users.length) {
                                            game.users.push(username);
                                        }
                                        else {
                                            game.users = new Array(username);
                                        }
                                    }
                                })
                            }
                        });

                    this.isLoading = false;
                },
                getGameDetails: async function (gameId) {

                    await axios.get(`${baseUrl}game/${gameId}`, axiosConfig)
                        .then((response) => {
                            this.selectedGame.id = response.data.id;
                            this.selectedGame.name = response.data.name;
                            this.selectedGame.price = response.data.price;
                            this.selectedGame.publisherId = response.data.publisher.id;
                            this.selectedGame.genreId = response.data.genres.map(genre => genre.id);
                        })
                        .catch((e) => {
                            if (e.response.status === 401) {
                                this.errorMessage = "You don't have the valid authentication to get the game details.";
                            }
                            else if (e.response.status === 400) {
                                this.errorMessage = e.response.data[0].errorMessage;
                            }
                            else {
                                this.errorMessage = e.message;
                            }
                        });
                },
                createGame: async function () {
                    this.resetValidate();
                    if (this.validateGame(this.newGame)) {
                        this.isLoading = true;
                        await axios.post(`${baseUrl}game`, this.newGame, axiosConfig)
                            .then((response) => {
                                const modalElement = document.getElementById("createGameModal");
                                const modal = bootstrap.Modal.getInstance(modalElement);
                                modal.hide();
                                this.cancelGame();
                                this.editGameName = "";
                            })
                            .catch((e) => {
                                if (e.response.status === 401) {
                                    this.errorMessage = "You don't have the valid authentication to create game.";
                                }
                                else if (e.response.status === 400) {
                                    if (e.response.data[0].errorMessage.toLowerCase().includes("name")) {
                                        this.errorName = "Game with name already exists";
                                    }
                                    else {
                                        this.errorMessage = e.response.data[0].errorMessage;
                                    }
                                }
                                else {
                                    this.errorMessage = e.message;
                                }
                            });
                        await this.showGames();
                        this.isLoading = false;
                    }
                },
                updateGame: async function (updatedGame) {

                    this.resetValidate();
                    if (this.validateGame(updatedGame)) {
                        this.isLoading = true;
                        await axios.put(`${baseUrl}game`, updatedGame, axiosConfig)
                            .then((response) => {
                                const modalElement = document.getElementById("updateGameModal");
                                const modal = bootstrap.Modal.getInstance(modalElement);
                                modal.hide();
                                this.cancelGame();
                                this.editGameName = "";

                            })
                            .catch((e) => {
                                if (e.response.status === 401) {
                                    this.errorMessage = "You don't have the valid authentication to edit game.";
                                }
                                else if (e.response.status === 400) {
                                    if (e.response.data[0].errorMessage.toLowerCase().includes("name")) {
                                        this.errorName = "Game with name already exists";
                                    }
                                    else {
                                        this.errorMessage = e.response.data[0].errorMessage;
                                    }
                                }
                                else {
                                    this.errorMessage = e.message;
                                }
                            });
                        await this.showGames();

                        this.isLoading = false;
                    }
                },
                deleteGame: async function (selectedGame) {
                    this.isLoading = true;

                    await axios.delete(`${baseUrl}game/${selectedGame.id}`, axiosConfig)
                        .then((response) => {
                            var index = this.games.map(function (game) { return game.id; }).indexOf(selectedGame.id);
                            this.games.splice(index, 1);
                        })
                        .catch((e) => {
                            if (e.response.status === 401) {
                                this.errorMessage = "You don't have the valid authentication to delete the game.";
                            }
                            else if (e.response.status === 400) {
                                this.errorMessage = e.response.data[0].errorMessage;
                            }
                            else {
                                this.errorMessage = e.message;
                            }
                        })
                        .finally(() => {
                            const modalElement = document.getElementById("deleteGameModal");
                            const modal = bootstrap.Modal.getInstance(modalElement);
                            modal.hide();
                            this.cancelGame();
                        });
                    this.isLoading = false;
                },
                getPublishers: async function () {

                    await axios.get(`${baseUrl}publisher`, axiosConfig)
                        .then((response) => {
                            this.publishers = response.data;
                        })
                        .catch((e) => {
                            if (e.response.status === 401) {
                                this.errorMessage = "You don't have the valid authentication to get the publishers.";
                            }
                            else if (e.response.status === 400) {
                                this.errorMessage = e.response.data[0].errorMessage;
                            }
                            else {
                                this.errorMessage = e.message;
                            }
                        });
                },
                getGenres: async function () {

                    await axios.get(`${baseUrl}genre`, axiosConfig)
                        .then((response) => {
                            this.genres = JSON.parse(JSON.stringify(response.data));
                        })
                        .catch((e) => {
                            if (e.response.status === 401) {
                                this.errorMessage = "You don't have the valid authentication to create game.";
                            }
                            else if (e.response.status === 400) {
                                this.errorMessage = e.response.data[0].errorMessage;
                            }
                            else {
                                this.errorMessage = e.message;
                            }
                        });
                },
                showCreate: async function () {
                    if (hasUserAdminRole()) {
                        await this.getGenres();
                        await this.getPublishers();
                        const modalElement = document.getElementById("createGameModal");
                        const modal = bootstrap.Modal.getInstance(modalElement);
                        modal.show();
                    }
                    else {
                        this.errorMessage = "You don't have the valid authentication to create a game.";
                    }
                },
                showUpdate: async function (game) {
                    if (hasUserAdminRole()) {
                        await this.getGenres();
                        await this.getPublishers();
                        await this.getGameDetails(game.id);
                        this.editGameName = game.name;
                        this.dropdownUpdate.setValue(this.selectedGame.genreId);

                        const modalElement = document.getElementById("updateGameModal");
                        const modal = bootstrap.Modal.getInstance(modalElement);
                        modal.show();
                    }
                    else {
                        this.errorMessage = "You don't have the valid authentication to update a game.";
                    }
                },
                showDelete: function (game) {
                    if (hasUserAdminRole()) {
                        this.selectedGame.id = game.id;
                        this.selectedGame.name = game.name;
                        this.selectedGame.price = parseFloat(game.price);
                        this.selectedGame.publisherId = game.publisher.id;
                        this.selectedGame.genreId = game.genres.map(genre => genre.id);

                        const modalElement = document.getElementById("deleteGameModal");
                        const modal = bootstrap.Modal.getInstance(modalElement);
                        modal.show();
                    }
                    else {
                        this.errorMessage = "You don't have the valid authentication to delete a game.";
                    }
                },
                cancelGame: function () {
                    this.resetValidate();

                    this.newGame = {
                        name: "",
                        price: 1,
                        publisherId: "",
                        genreId: [""]
                    };
                    this.selectedGame = {
                        id: "",
                        name: "",
                        price: 1,
                        publisherId: "",
                        genreId: [""]
                    };

                    this.dropdownCreate.empty();
                    this.dropdownUpdate.empty();
                },
                validateGame: function (game) {
                    if (game.name === "") {
                        this.errorName = "Name must be filled in";
                    }
                    if (game.price === null || game.price === 0) {
                        this.errorPrice = "Price must be filled in";
                    }
                    if (game.publisherId === "") {
                        this.errorPublisher = "Publisher must be selected";
                    }

                    return (this.errorName === "" && this.errorPrice === "" && this.errorPublisher === "");
                },

                resetValidate: function () {
                    this.errorName = "";
                    this.errorPrice = "";
                    this.errorPublisher = "";
                }
            }
        });
    </script>
}