@{
    ViewData["Title"] = "Externe Api";
}


<div class="text-center">
    <h1 class="display-4">Tourist</h1>

</div>

<div id="app" class="row">
    <div class="col-md-12">
        <div class="alert alert-info" v-if="feedback">
            {{feedback}}
        </div>
    </div>
    <div class="col-md-12">
        <button class="btn btn-info" v-on:click.prevent="toEditMode(false)">New</button>
    </div>
    <div class="col-md-6">
        <ul class="list-group">
            <li class="list-group-item" v-bind:class="getCommentCssClass()" v-for="comment in comments" v-on:click="getCommentDetails(comment)">
                <a>{{comment.name}}</a>
            </li>
        </ul>
    </div>
    <div class="col-md-6">
        <div v-if="currentComment">
            <div class="form-group">
                <label>ID</label>
                <input class="form-control" v-model="currentComment.id" readonly="readonly" />
            </div>
            <div class="form-group">
                <label>ID Post</label>
                <input class="form-control" v-model="currentComment.post_id" readonly="readonly" />
            </div>
            <div class="form-group">
                <label>Name</label>
                <input class="form-control" v-model="currentComment.name" v-bind:readonly="isReadOnly" />
            </div>
            <div class="form-group">
                <label>E-mail</label>
                <input class="form-control" v-model="currentComment.email" v-bind:readonly="isReadOnly" />
            </div>
            <div class="form-group">
                <label>Body</label>
                <input class="form-control" v-model="currentComment.body" v-bind:readonly="isReadOnly" />
            </div>
            <div class="btn-group">
                <button class="btn btn-warning" v-if="isReadOnly" v-on:click.prevent="toEditMode(true)">Edit</button>
                <button class="btn btn-warning" v-if="!isReadOnly" v-on:click.prevent="saveComment">Save</button>
                <button class="btn btn-primary" v-if="!isReadOnly" v-on:click.prevent="isReadOnly = true">Cancel</button>
                <button class="btn btn-danger" v-on:click.prevent="deleteComment">Delete</button>
            </div>
        </div>
    </div>
</div>

@section scripts{
    <script src="~/lib/vue/vue.js"></script>
    <script src="~/lib/axios/axios.min.js"></script>
    <script>
        var app = new Vue({
            el: '#app',
            data: {
                tourist: [{
                    id: "",
                    tourist_name: "",
                    tourist_email: "",
                    tourist_profilepicture: "",
                    tourist_location: "",
                    createdat: ""
                }],
                getTourist: {
                    id: "",
                    tourist_name: "",
                    tourist_email: "",
                    tourist_profilepicture: "",
                    tourist_location: "",
                    createdat: ""
                },
                postTourist: {
                    tourist_name: "",
                    tourist_email: "",
                    tourist_location: "",
                },
                putTourist: {
                    id: "",
                    tourist_name: "",
                    tourist_email: "",
                    tourist_location: "",
                },
            },
            created: function () {
                var self = this;
                self.getTourists();
            },
            methods: {
                getTourists: async function () {
                    await axios.get(`${baseUrlExterneApi}/Tourist`)
                        .then(response => {
                            this.tourist=response.data;
                        })

                        .catch(function (error) {
                            console.error(error);
                        });
                },

                getTouristsId: async function (id) {
                    await axios.get(`${baseUrlExterneApi}/Tourist/${id}`)
                        .then(response => {
                            this.getTourist = response.data;
                        })
                        .catch(function (error) {
                            console.error(error);
                        });
                },

                postTourists: async function () {
                    await axios.post(`${baseUrlExterneApi}/Tourist/`, postTourist)
                        .then(response => {
                            this.getTourist = response.data;
                        })
                        .catch(function (error) {
                            console.error(error);
                        });
                },

                putTourists: async function () {
                    await axios.put(`${baseUrlExterneApi}/Tourist//${putTourist.id}`, putTourist)
                        .then(response => {
                            this.getTourist = response.data;
                        })
                        .catch(function (error) {
                            console.error(error);
                        });
                },

                deleteTourist:async function(){
                    await axios.delete(`${baseUrlExterneApi}/Tourist/${putTourist.id}`)
                        .then(response => {
                            this.getTourist = response.data;
                        })
                        .catch(function (error) {
                            console.error(error);
                        });
                }

                toEditMode: function (isEditMode) {
                    var self = this;
                    self.isReadOnly = false;
                    self.isEditMode = isEditMode;

                    if (!self.isEditMode) {
                        self.currentComment = {
                            post_id: "",
                            id: "",
                            name: "",
                            email: "",
                            body: ""
                        }
                    }
                },

                saveComment: function () {
                    var self = this;

                    if (self.isEditMode) {

                        var url = `${apiURL}/${self.currentComment.id}`;
                        axios.put(url, self.currentComment, axiosConfig)
                            .then(function (response) {
                                self.feedback = `Comment ${self.currentComment.name} with ID ${self.currentComment.id} has been modified`;
                            })
                            .catch(function (error) {
                                console.error(error);
                            })
                            .then(function () {
                                self.isReadOnly = true;
                                setTimeout(function () { self.feedback = null; }, 3000);
                            });
                    }
                    else {
                        var url = `${apiURL}`;
                        axios.post(url, self.currentComment, axiosConfig)
                            .then(function (response) {
                                self.currentComment = response.data.data;
                                self.feedback = `Comment ${self.currentComment.name} with ID ${self.currentComment.id} has been created`;
                                self.comments.push(self.currentComment); // update Comments, no need to call API again to fetch all Comments
                            })
                            .catch(function (error) {
                                console.error(error);
                            })
                            .then(function () {
                                self.isReadOnly = true;
                                setTimeout(function () { self.feedback = null; }, 3000);
                            });
                    }
                },

                deleteComment: function () {
                    var self = this;
                    var url = `${apiURL}/${self.currentComment.id}`;

                    axios.delete(url, axiosConfig)
                        .then(function (response) {
                            self.comments.forEach(function (comment, i) {
                                if (comment.id === self.currentComment.id) {
                                    self.comments.splice(i, 1); // update Comments, no need to call API again to fetch all Comments
                                }
                            })
                        })
                        .catch(function (error) { console.error(error); })
                        .then(function () { });
                }
            }
        });
    </script>
}