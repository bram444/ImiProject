// <auto-generated />
using System;
using Imi.Project.Api.Infrastructure.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace Imi.Project.Api.Infrastructure.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    [Migration("20230117113808_initialMigration")]
    partial class initialMigration
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "6.0.11")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder, 1L, 1);

            modelBuilder.Entity("Imi.Project.Api.Core.Entities.ApplicationUser", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<bool>("ApprovedTerms")
                        .HasColumnType("bit");

                    b.Property<DateTime>("BirthDay")
                        .HasColumnType("datetime2");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("FirstName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("LastName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("Email")
                        .IsUnique()
                        .HasFilter("[Email] IS NOT NULL");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.HasIndex("UserName")
                        .IsUnique()
                        .HasFilter("[UserName] IS NOT NULL");

                    b.ToTable("AspNetUsers", (string)null);

                    b.HasData(
                        new
                        {
                            Id = new Guid("00000000-0000-0000-0000-000000000001"),
                            AccessFailedCount = 0,
                            ApprovedTerms = true,
                            BirthDay = new DateTime(2023, 1, 17, 12, 38, 8, 233, DateTimeKind.Local).AddTicks(5565),
                            ConcurrencyStamp = "03badd3a-80ac-4434-bc1a-a1a0df749183",
                            Email = "FirstUser@gmail.com",
                            EmailConfirmed = true,
                            FirstName = "First",
                            LastName = "User",
                            LockoutEnabled = false,
                            NormalizedEmail = "FirstUser@gmail.com",
                            NormalizedUserName = "FirstGuy",
                            PasswordHash = "AQAAAAEAACcQAAAAEHDSxQZGHsJWdmaIMQnw2bw38CsWJV5I+vfjUUAcZVqhCbwZXa2U/gUyk7hhPRkjhQ==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "f852d686-43e9-4164-89db-9f128fdd7f70",
                            TwoFactorEnabled = false,
                            UserName = "FirstGuy"
                        },
                        new
                        {
                            Id = new Guid("00000000-0000-0000-0000-000000000002"),
                            AccessFailedCount = 0,
                            ApprovedTerms = true,
                            BirthDay = new DateTime(2000, 8, 19, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            ConcurrencyStamp = "32182d0a-da2e-44b9-bb73-64696205194e",
                            Email = "SecondUser@gmail.com",
                            EmailConfirmed = true,
                            FirstName = "Second",
                            LastName = "User",
                            LockoutEnabled = false,
                            NormalizedEmail = "SecondUser@gmail.com",
                            NormalizedUserName = "TimTheDestroyerXx400",
                            PasswordHash = "AQAAAAEAACcQAAAAEDBQFb7PZh4kAqZ+gnubkMDhNoDpxt6vnJFkHqIRz7g4LZgvG2n/ePFiWxgFVuGttQ==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "6ce28d56-b3e2-41f9-bf60-3b706fc0eb24",
                            TwoFactorEnabled = false,
                            UserName = "TimTheDestroyerXx400"
                        },
                        new
                        {
                            Id = new Guid("00000000-0000-0000-0000-000000000003"),
                            AccessFailedCount = 0,
                            ApprovedTerms = true,
                            BirthDay = new DateTime(2010, 8, 19, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            ConcurrencyStamp = "8b7833c8-4af9-4aaf-931d-37b96fd913c7",
                            Email = "ThirdUser@gmail.com",
                            EmailConfirmed = true,
                            FirstName = "Third",
                            LastName = "User",
                            LockoutEnabled = false,
                            NormalizedEmail = "ThirdUser@gmail.com",
                            NormalizedUserName = "UserTheThird",
                            PasswordHash = "AQAAAAEAACcQAAAAEA/gOc+KiXxoCinq670/K4f4p88ChdmpaPK3TGwtCzpB6SdVvUbc6kmIS6mfssA/NA==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "37110702-a3ef-4068-818d-e3f294e2d482",
                            TwoFactorEnabled = false,
                            UserName = "UserTheThird"
                        },
                        new
                        {
                            Id = new Guid("00000000-0000-0000-0000-000000000004"),
                            AccessFailedCount = 0,
                            ApprovedTerms = true,
                            BirthDay = new DateTime(2010, 8, 19, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            ConcurrencyStamp = "f14b343d-fa64-4a67-9c69-e447c5c09d64",
                            Email = "FourthUser@gmail.com",
                            EmailConfirmed = true,
                            FirstName = "Fourth",
                            LastName = "User",
                            LockoutEnabled = false,
                            NormalizedEmail = "FourthUser@gmail.com",
                            NormalizedUserName = "UserTheFourth",
                            PasswordHash = "AQAAAAEAACcQAAAAEKfbm6HEEfmVuxJcc3Dw08cu2Dh/gIilzxZwI2mBnwxhOd9oHh5m9KKuwdL3o5Of9Q==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "257de31b-e938-46e8-af5e-61aa66abc988",
                            TwoFactorEnabled = false,
                            UserName = "UserTheFourth"
                        },
                        new
                        {
                            Id = new Guid("00000000-0000-0000-0000-000000000005"),
                            AccessFailedCount = 0,
                            ApprovedTerms = true,
                            BirthDay = new DateTime(2010, 8, 19, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            ConcurrencyStamp = "7db47a36-2b59-480b-b908-46d83f57a00b",
                            Email = "FifthUser@gmail.com",
                            EmailConfirmed = true,
                            FirstName = "Fifth",
                            LastName = "User",
                            LockoutEnabled = false,
                            NormalizedEmail = "FifthUser@gmail.com",
                            NormalizedUserName = "UserTheFifth",
                            PasswordHash = "AQAAAAEAACcQAAAAEFqeqvx/oT38CAFYJmiUzmnhlhTmwtO4slZo7ofQjwxmUdSOwLpK5Tkn6XdcFC4a5g==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "7312e248-96c6-4aad-8958-84ba95164b91",
                            TwoFactorEnabled = false,
                            UserName = "UserTheFifth"
                        },
                        new
                        {
                            Id = new Guid("00000000-0000-0000-0000-000000000006"),
                            AccessFailedCount = 0,
                            ApprovedTerms = true,
                            BirthDay = new DateTime(2010, 8, 19, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            ConcurrencyStamp = "0154d657-2206-448f-8fc5-a3862052ff2f",
                            Email = "SixUser@gmail.com",
                            EmailConfirmed = true,
                            FirstName = "Six",
                            LastName = "User",
                            LockoutEnabled = false,
                            NormalizedEmail = "SixUser@gmail.com",
                            NormalizedUserName = "UserTheSith",
                            PasswordHash = "AQAAAAEAACcQAAAAEGguDoWv12UYLrtdq8VUoZ9bBd9ES0JFLDhX9k+NqpAdpBSRepdqRyljZ9yVh8sMWA==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "075234c2-d785-40d6-97e5-0afa32e4d1e4",
                            TwoFactorEnabled = false,
                            UserName = "UserTheSith"
                        },
                        new
                        {
                            Id = new Guid("00000000-0000-0000-0000-000000000007"),
                            AccessFailedCount = 0,
                            ApprovedTerms = true,
                            BirthDay = new DateTime(2010, 8, 19, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            ConcurrencyStamp = "14f4f5f2-be8d-451f-ac85-e56983212a8f",
                            Email = "SevenUser@gmail.com",
                            EmailConfirmed = true,
                            FirstName = "Seven",
                            LastName = "User",
                            LockoutEnabled = false,
                            NormalizedEmail = "SevenUser@gmail.com",
                            NormalizedUserName = "UserTheSeven",
                            PasswordHash = "AQAAAAEAACcQAAAAENGhRTRGlLe/VX6jg/9nyo4k9P4lKl1ZVf3e4nTTfcU3IDMduwSsIIrDpEHciax4Jg==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "1e9e5640-8d2c-414d-966c-8290b67d331c",
                            TwoFactorEnabled = false,
                            UserName = "UserTheSeven"
                        },
                        new
                        {
                            Id = new Guid("00000000-0000-0000-0000-000000000008"),
                            AccessFailedCount = 0,
                            ApprovedTerms = true,
                            BirthDay = new DateTime(2010, 8, 19, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            ConcurrencyStamp = "c0ddd710-da6c-417b-8c91-0b908da7c540",
                            Email = "EigthUser@gmail.com",
                            EmailConfirmed = true,
                            FirstName = "Eigth",
                            LastName = "User",
                            LockoutEnabled = false,
                            NormalizedEmail = "EigthUser@gmail.com",
                            NormalizedUserName = "UserTheEigth",
                            PasswordHash = "AQAAAAEAACcQAAAAEJDI8r9uVaM77DR9PNhI4T8kuHBwFlr1+6cRDQTUiLDe0gq5Cv5CAQIbjR1ZT3YiNw==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "c22272b1-c6c9-4d58-9651-d64e0f5f0e88",
                            TwoFactorEnabled = false,
                            UserName = "UserTheEigth"
                        },
                        new
                        {
                            Id = new Guid("00000000-0000-0000-0000-000000000009"),
                            AccessFailedCount = 0,
                            ApprovedTerms = true,
                            BirthDay = new DateTime(2010, 8, 19, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            ConcurrencyStamp = "96a13a93-4a27-415b-a984-7696da73cab9",
                            Email = "NinthUser@gmail.com",
                            EmailConfirmed = true,
                            FirstName = "Ninth",
                            LastName = "User",
                            LockoutEnabled = false,
                            NormalizedEmail = "NinthUser@gmail.com",
                            NormalizedUserName = "UserTheNinth",
                            PasswordHash = "AQAAAAEAACcQAAAAEJcmDPDb/wwkv2DiI4lrGdWOrJNYFH23c+F3pPTdiV7nRmXfFZPcGLzfIVb2TS2Acg==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "444c0259-ffe9-4c95-af98-a05a8da9b21a",
                            TwoFactorEnabled = false,
                            UserName = "UserTheNinth"
                        },
                        new
                        {
                            Id = new Guid("00000000-0000-0000-0000-000000000010"),
                            AccessFailedCount = 0,
                            ApprovedTerms = true,
                            BirthDay = new DateTime(2010, 8, 19, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            ConcurrencyStamp = "3d7e77cc-185f-4920-8ad3-58470ed09a55",
                            Email = "XUser@gmail.com",
                            EmailConfirmed = true,
                            FirstName = "X",
                            LastName = "User",
                            LockoutEnabled = false,
                            NormalizedEmail = "XUser@gmail.com",
                            NormalizedUserName = "UserX",
                            PasswordHash = "AQAAAAEAACcQAAAAEChe+Gpv3coBS4xNeqAg0n8qf5H6uDcsL451TGcURRAteQp/0XahdaQ4u4nGn9DkdA==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "8360b438-3dcc-46b5-8d28-348a59648616",
                            TwoFactorEnabled = false,
                            UserName = "UserX"
                        },
                        new
                        {
                            Id = new Guid("00000000-0000-0000-0000-000000000011"),
                            AccessFailedCount = 0,
                            ApprovedTerms = true,
                            BirthDay = new DateTime(2010, 8, 19, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            ConcurrencyStamp = "c22fb781-a6f2-42c9-aca8-d8db8e3b7a4c",
                            Email = "admin@imi.be",
                            EmailConfirmed = true,
                            FirstName = "ad",
                            LastName = "min",
                            LockoutEnabled = false,
                            NormalizedEmail = "admin@imi.be",
                            NormalizedUserName = "admin",
                            PasswordHash = "AQAAAAEAACcQAAAAEJ+umXHMJnSoIn0cw/l/i8Z6FAFLeG2BfPoHGldqXZb47W9u6WXQX/Ww2pEmTkA6tQ==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "05ad25f2-5208-40d3-ae41-58920f4bb5c7",
                            TwoFactorEnabled = false,
                            UserName = "admin"
                        },
                        new
                        {
                            Id = new Guid("00000000-0000-0000-0000-000000000012"),
                            AccessFailedCount = 0,
                            ApprovedTerms = true,
                            BirthDay = new DateTime(2010, 8, 19, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            ConcurrencyStamp = "74011e3f-27f5-4e75-b972-a76f56096ae0",
                            Email = "user@imi.be",
                            EmailConfirmed = true,
                            FirstName = "us",
                            LastName = "er",
                            LockoutEnabled = false,
                            NormalizedEmail = "user@imi.be",
                            NormalizedUserName = "user",
                            PasswordHash = "AQAAAAEAACcQAAAAEF2qkzHGScVY7u8EnhQIIAGoNteazouhHUNdxHBW36m0RYrNDhM+Bk7CqR30s7CKpw==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "390c0a7d-d1f8-4f26-aa34-9155deea7c38",
                            TwoFactorEnabled = false,
                            UserName = "user"
                        },
                        new
                        {
                            Id = new Guid("00000000-0000-0000-0000-000000000013"),
                            AccessFailedCount = 0,
                            ApprovedTerms = false,
                            BirthDay = new DateTime(2010, 8, 19, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            ConcurrencyStamp = "5d186790-4816-400d-b1de-f90375563a5b",
                            Email = "refuser@imi.be",
                            EmailConfirmed = true,
                            FirstName = "ref",
                            LastName = "user",
                            LockoutEnabled = false,
                            NormalizedEmail = "refuser@imi.be",
                            NormalizedUserName = "refuser",
                            PasswordHash = "AQAAAAEAACcQAAAAENBBzphzf8eehQDER3Y+yVDIKp3wvX07aPF3VLE3j3k7cjCSsCLUjOFJ76cww1YYqQ==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "6963940f-56b0-4765-8327-3bb5b976035f",
                            TwoFactorEnabled = false,
                            UserName = "refuser"
                        });
                });

            modelBuilder.Entity("Imi.Project.Api.Core.Entities.Game", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(450)");

                    b.Property<float>("Price")
                        .HasColumnType("real");

                    b.Property<Guid>("PublisherId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("Name")
                        .IsUnique()
                        .HasFilter("[Name] IS NOT NULL");

                    b.HasIndex("PublisherId");

                    b.ToTable("Games");

                    b.HasData(
                        new
                        {
                            Id = new Guid("00000000-0000-0000-0000-000000000001"),
                            Name = "Fallout New Vegas",
                            Price = 14.99f,
                            PublisherId = new Guid("00000000-0000-0000-0000-000000000001")
                        },
                        new
                        {
                            Id = new Guid("00000000-0000-0000-0000-000000000002"),
                            Name = "Splatoon 3",
                            Price = 59.99f,
                            PublisherId = new Guid("00000000-0000-0000-0000-000000000002")
                        },
                        new
                        {
                            Id = new Guid("00000000-0000-0000-0000-000000000003"),
                            Name = "Animal Crossing",
                            Price = 59.99f,
                            PublisherId = new Guid("00000000-0000-0000-0000-000000000002")
                        },
                        new
                        {
                            Id = new Guid("00000000-0000-0000-0000-000000000004"),
                            Name = "Fallout 3",
                            Price = 14.99f,
                            PublisherId = new Guid("00000000-0000-0000-0000-000000000001")
                        },
                        new
                        {
                            Id = new Guid("00000000-0000-0000-0000-000000000005"),
                            Name = "Fallout 4",
                            Price = 14.99f,
                            PublisherId = new Guid("00000000-0000-0000-0000-000000000001")
                        },
                        new
                        {
                            Id = new Guid("00000000-0000-0000-0000-000000000006"),
                            Name = "Splatoon 2",
                            Price = 59.99f,
                            PublisherId = new Guid("00000000-0000-0000-0000-000000000002")
                        },
                        new
                        {
                            Id = new Guid("00000000-0000-0000-0000-000000000007"),
                            Name = "Splatoon",
                            Price = 59.99f,
                            PublisherId = new Guid("00000000-0000-0000-0000-000000000002")
                        },
                        new
                        {
                            Id = new Guid("00000000-0000-0000-0000-000000000008"),
                            Name = "Rabbits",
                            Price = 59.99f,
                            PublisherId = new Guid("00000000-0000-0000-0000-000000000003")
                        },
                        new
                        {
                            Id = new Guid("00000000-0000-0000-0000-000000000009"),
                            Name = "Rayman",
                            Price = 59.99f,
                            PublisherId = new Guid("00000000-0000-0000-0000-000000000003")
                        },
                        new
                        {
                            Id = new Guid("00000000-0000-0000-0000-000000000010"),
                            Name = "Assassins creed",
                            Price = 59.99f,
                            PublisherId = new Guid("00000000-0000-0000-0000-000000000003")
                        });
                });

            modelBuilder.Entity("Imi.Project.Api.Core.Entities.GameGenre", b =>
                {
                    b.Property<Guid>("GenreId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("GameId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("GenreId", "GameId");

                    b.HasIndex("GameId");

                    b.ToTable("GamesGenre");

                    b.HasData(
                        new
                        {
                            GenreId = new Guid("00000000-0000-0000-0000-000000000001"),
                            GameId = new Guid("00000000-0000-0000-0000-000000000001")
                        },
                        new
                        {
                            GenreId = new Guid("00000000-0000-0000-0000-000000000002"),
                            GameId = new Guid("00000000-0000-0000-0000-000000000001")
                        },
                        new
                        {
                            GenreId = new Guid("00000000-0000-0000-0000-000000000002"),
                            GameId = new Guid("00000000-0000-0000-0000-000000000002")
                        },
                        new
                        {
                            GenreId = new Guid("00000000-0000-0000-0000-000000000003"),
                            GameId = new Guid("00000000-0000-0000-0000-000000000003")
                        },
                        new
                        {
                            GenreId = new Guid("00000000-0000-0000-0000-000000000007"),
                            GameId = new Guid("00000000-0000-0000-0000-000000000004")
                        },
                        new
                        {
                            GenreId = new Guid("00000000-0000-0000-0000-000000000008"),
                            GameId = new Guid("00000000-0000-0000-0000-000000000004")
                        },
                        new
                        {
                            GenreId = new Guid("00000000-0000-0000-0000-000000000009"),
                            GameId = new Guid("00000000-0000-0000-0000-000000000010")
                        },
                        new
                        {
                            GenreId = new Guid("00000000-0000-0000-0000-000000000010"),
                            GameId = new Guid("00000000-0000-0000-0000-000000000010")
                        },
                        new
                        {
                            GenreId = new Guid("00000000-0000-0000-0000-000000000002"),
                            GameId = new Guid("00000000-0000-0000-0000-000000000006")
                        },
                        new
                        {
                            GenreId = new Guid("00000000-0000-0000-0000-000000000002"),
                            GameId = new Guid("00000000-0000-0000-0000-000000000007")
                        });
                });

            modelBuilder.Entity("Imi.Project.Api.Core.Entities.Genre", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("Name")
                        .IsUnique()
                        .HasFilter("[Name] IS NOT NULL");

                    b.ToTable("Genres");

                    b.HasData(
                        new
                        {
                            Id = new Guid("00000000-0000-0000-0000-000000000001"),
                            Description = "Fist person shooter",
                            Name = "FPS"
                        },
                        new
                        {
                            Id = new Guid("00000000-0000-0000-0000-000000000002"),
                            Description = "Fist person shooter but in the third person",
                            Name = "Third person shooter"
                        },
                        new
                        {
                            Id = new Guid("00000000-0000-0000-0000-000000000003"),
                            Name = "Simulation"
                        },
                        new
                        {
                            Id = new Guid("00000000-0000-0000-0000-000000000004"),
                            Name = "Platformer"
                        },
                        new
                        {
                            Id = new Guid("00000000-0000-0000-0000-000000000005"),
                            Name = "Party game"
                        },
                        new
                        {
                            Id = new Guid("00000000-0000-0000-0000-000000000006"),
                            Name = "Story driven"
                        },
                        new
                        {
                            Id = new Guid("00000000-0000-0000-0000-000000000007"),
                            Name = "Open Word"
                        },
                        new
                        {
                            Id = new Guid("00000000-0000-0000-0000-000000000008"),
                            Name = "Nonlinear gameplay"
                        },
                        new
                        {
                            Id = new Guid("00000000-0000-0000-0000-000000000009"),
                            Name = "Action-adventure"
                        },
                        new
                        {
                            Id = new Guid("00000000-0000-0000-0000-000000000010"),
                            Name = "Stealth"
                        });
                });

            modelBuilder.Entity("Imi.Project.Api.Core.Entities.Publisher", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Country")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("Name")
                        .IsUnique()
                        .HasFilter("[Name] IS NOT NULL");

                    b.ToTable("Publishers");

                    b.HasData(
                        new
                        {
                            Id = new Guid("00000000-0000-0000-0000-000000000001"),
                            Country = "America",
                            Name = "Bethesda"
                        },
                        new
                        {
                            Id = new Guid("00000000-0000-0000-0000-000000000002"),
                            Country = "Japan",
                            Name = "Nintendo"
                        },
                        new
                        {
                            Id = new Guid("00000000-0000-0000-0000-000000000003"),
                            Country = "America",
                            Name = "Ubisoft"
                        },
                        new
                        {
                            Id = new Guid("00000000-0000-0000-0000-000000000004"),
                            Country = "Japan",
                            Name = "Square inex"
                        },
                        new
                        {
                            Id = new Guid("00000000-0000-0000-0000-000000000005"),
                            Country = "America",
                            Name = "Sony"
                        },
                        new
                        {
                            Id = new Guid("00000000-0000-0000-0000-000000000006"),
                            Country = "America",
                            Name = "Microsoft"
                        },
                        new
                        {
                            Id = new Guid("00000000-0000-0000-0000-000000000007"),
                            Country = "Japan",
                            Name = "The pokemon company"
                        },
                        new
                        {
                            Id = new Guid("00000000-0000-0000-0000-000000000008"),
                            Country = "Sweden",
                            Name = "CD project"
                        },
                        new
                        {
                            Id = new Guid("00000000-0000-0000-0000-000000000009"),
                            Country = "Japan",
                            Name = "Arc System Works"
                        },
                        new
                        {
                            Id = new Guid("00000000-0000-0000-0000-000000000010"),
                            Country = "America",
                            Name = "Interplay Entertainment"
                        });
                });

            modelBuilder.Entity("Imi.Project.Api.Core.Entities.UserGame", b =>
                {
                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("GameId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("UserId", "GameId");

                    b.HasIndex("GameId");

                    b.ToTable("UsersGames");

                    b.HasData(
                        new
                        {
                            UserId = new Guid("00000000-0000-0000-0000-000000000002"),
                            GameId = new Guid("00000000-0000-0000-0000-000000000001")
                        },
                        new
                        {
                            UserId = new Guid("00000000-0000-0000-0000-000000000002"),
                            GameId = new Guid("00000000-0000-0000-0000-000000000002")
                        },
                        new
                        {
                            UserId = new Guid("00000000-0000-0000-0000-000000000002"),
                            GameId = new Guid("00000000-0000-0000-0000-000000000003")
                        },
                        new
                        {
                            UserId = new Guid("00000000-0000-0000-0000-000000000001"),
                            GameId = new Guid("00000000-0000-0000-0000-000000000003")
                        },
                        new
                        {
                            UserId = new Guid("00000000-0000-0000-0000-000000000004"),
                            GameId = new Guid("00000000-0000-0000-0000-000000000004")
                        },
                        new
                        {
                            UserId = new Guid("00000000-0000-0000-0000-000000000005"),
                            GameId = new Guid("00000000-0000-0000-0000-000000000005")
                        },
                        new
                        {
                            UserId = new Guid("00000000-0000-0000-0000-000000000006"),
                            GameId = new Guid("00000000-0000-0000-0000-000000000006")
                        },
                        new
                        {
                            UserId = new Guid("00000000-0000-0000-0000-000000000007"),
                            GameId = new Guid("00000000-0000-0000-0000-000000000007")
                        },
                        new
                        {
                            UserId = new Guid("00000000-0000-0000-0000-000000000008"),
                            GameId = new Guid("00000000-0000-0000-0000-000000000008")
                        },
                        new
                        {
                            UserId = new Guid("00000000-0000-0000-0000-000000000009"),
                            GameId = new Guid("00000000-0000-0000-0000-000000000009")
                        },
                        new
                        {
                            UserId = new Guid("00000000-0000-0000-0000-000000000009"),
                            GameId = new Guid("00000000-0000-0000-0000-000000000008")
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole<System.Guid>", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles", (string)null);

                    b.HasData(
                        new
                        {
                            Id = new Guid("00000000-0000-0000-0000-000000000001"),
                            ConcurrencyStamp = "8c73368e-c4ed-414c-adbf-e317b4940a2a",
                            Name = "Admin",
                            NormalizedName = "Admin"
                        },
                        new
                        {
                            Id = new Guid("00000000-0000-0000-0000-000000000002"),
                            ConcurrencyStamp = "1a5ec313-4557-4a3b-9d45-fb8a7601cb6d",
                            Name = "User",
                            NormalizedName = "User"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<System.Guid>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("RoleId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<System.Guid>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);

                    b.HasData(
                        new
                        {
                            Id = 1,
                            ClaimType = "http://schemas.xmlsoap.org/ws/2005/05/identity/claims/dateofbirth",
                            ClaimValue = "17/01/2023",
                            UserId = new Guid("00000000-0000-0000-0000-000000000001")
                        },
                        new
                        {
                            Id = 2,
                            ClaimType = "approved",
                            ClaimValue = "True",
                            UserId = new Guid("00000000-0000-0000-0000-000000000001")
                        },
                        new
                        {
                            Id = 3,
                            ClaimType = "http://schemas.xmlsoap.org/ws/2005/05/identity/claims/dateofbirth",
                            ClaimValue = "19/08/2000",
                            UserId = new Guid("00000000-0000-0000-0000-000000000002")
                        },
                        new
                        {
                            Id = 4,
                            ClaimType = "approved",
                            ClaimValue = "True",
                            UserId = new Guid("00000000-0000-0000-0000-000000000002")
                        },
                        new
                        {
                            Id = 5,
                            ClaimType = "http://schemas.xmlsoap.org/ws/2005/05/identity/claims/dateofbirth",
                            ClaimValue = "19/08/2010",
                            UserId = new Guid("00000000-0000-0000-0000-000000000003")
                        },
                        new
                        {
                            Id = 6,
                            ClaimType = "approved",
                            ClaimValue = "True",
                            UserId = new Guid("00000000-0000-0000-0000-000000000003")
                        },
                        new
                        {
                            Id = 7,
                            ClaimType = "http://schemas.xmlsoap.org/ws/2005/05/identity/claims/dateofbirth",
                            ClaimValue = "19/08/2010",
                            UserId = new Guid("00000000-0000-0000-0000-000000000004")
                        },
                        new
                        {
                            Id = 8,
                            ClaimType = "approved",
                            ClaimValue = "True",
                            UserId = new Guid("00000000-0000-0000-0000-000000000004")
                        },
                        new
                        {
                            Id = 9,
                            ClaimType = "http://schemas.xmlsoap.org/ws/2005/05/identity/claims/dateofbirth",
                            ClaimValue = "19/08/2010",
                            UserId = new Guid("00000000-0000-0000-0000-000000000005")
                        },
                        new
                        {
                            Id = 10,
                            ClaimType = "approved",
                            ClaimValue = "True",
                            UserId = new Guid("00000000-0000-0000-0000-000000000005")
                        },
                        new
                        {
                            Id = 11,
                            ClaimType = "http://schemas.xmlsoap.org/ws/2005/05/identity/claims/dateofbirth",
                            ClaimValue = "19/08/2010",
                            UserId = new Guid("00000000-0000-0000-0000-000000000006")
                        },
                        new
                        {
                            Id = 12,
                            ClaimType = "approved",
                            ClaimValue = "True",
                            UserId = new Guid("00000000-0000-0000-0000-000000000006")
                        },
                        new
                        {
                            Id = 13,
                            ClaimType = "http://schemas.xmlsoap.org/ws/2005/05/identity/claims/dateofbirth",
                            ClaimValue = "19/08/2010",
                            UserId = new Guid("00000000-0000-0000-0000-000000000007")
                        },
                        new
                        {
                            Id = 14,
                            ClaimType = "approved",
                            ClaimValue = "True",
                            UserId = new Guid("00000000-0000-0000-0000-000000000007")
                        },
                        new
                        {
                            Id = 15,
                            ClaimType = "http://schemas.xmlsoap.org/ws/2005/05/identity/claims/dateofbirth",
                            ClaimValue = "19/08/2010",
                            UserId = new Guid("00000000-0000-0000-0000-000000000008")
                        },
                        new
                        {
                            Id = 16,
                            ClaimType = "approved",
                            ClaimValue = "True",
                            UserId = new Guid("00000000-0000-0000-0000-000000000008")
                        },
                        new
                        {
                            Id = 17,
                            ClaimType = "http://schemas.xmlsoap.org/ws/2005/05/identity/claims/dateofbirth",
                            ClaimValue = "19/08/2010",
                            UserId = new Guid("00000000-0000-0000-0000-000000000009")
                        },
                        new
                        {
                            Id = 18,
                            ClaimType = "approved",
                            ClaimValue = "True",
                            UserId = new Guid("00000000-0000-0000-0000-000000000009")
                        },
                        new
                        {
                            Id = 19,
                            ClaimType = "http://schemas.xmlsoap.org/ws/2005/05/identity/claims/dateofbirth",
                            ClaimValue = "19/08/2010",
                            UserId = new Guid("00000000-0000-0000-0000-000000000010")
                        },
                        new
                        {
                            Id = 20,
                            ClaimType = "approved",
                            ClaimValue = "True",
                            UserId = new Guid("00000000-0000-0000-0000-000000000010")
                        },
                        new
                        {
                            Id = 21,
                            ClaimType = "http://schemas.xmlsoap.org/ws/2005/05/identity/claims/dateofbirth",
                            ClaimValue = "19/08/2010",
                            UserId = new Guid("00000000-0000-0000-0000-000000000011")
                        },
                        new
                        {
                            Id = 22,
                            ClaimType = "approved",
                            ClaimValue = "True",
                            UserId = new Guid("00000000-0000-0000-0000-000000000011")
                        },
                        new
                        {
                            Id = 23,
                            ClaimType = "http://schemas.xmlsoap.org/ws/2005/05/identity/claims/dateofbirth",
                            ClaimValue = "19/08/2010",
                            UserId = new Guid("00000000-0000-0000-0000-000000000012")
                        },
                        new
                        {
                            Id = 24,
                            ClaimType = "approved",
                            ClaimValue = "True",
                            UserId = new Guid("00000000-0000-0000-0000-000000000012")
                        },
                        new
                        {
                            Id = 25,
                            ClaimType = "http://schemas.xmlsoap.org/ws/2005/05/identity/claims/dateofbirth",
                            ClaimValue = "19/08/2010",
                            UserId = new Guid("00000000-0000-0000-0000-000000000013")
                        },
                        new
                        {
                            Id = 26,
                            ClaimType = "approved",
                            ClaimValue = "True",
                            UserId = new Guid("00000000-0000-0000-0000-000000000013")
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<System.Guid>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<System.Guid>", b =>
                {
                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("RoleId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);

                    b.HasData(
                        new
                        {
                            UserId = new Guid("00000000-0000-0000-0000-000000000001"),
                            RoleId = new Guid("00000000-0000-0000-0000-000000000002")
                        },
                        new
                        {
                            UserId = new Guid("00000000-0000-0000-0000-000000000002"),
                            RoleId = new Guid("00000000-0000-0000-0000-000000000001")
                        },
                        new
                        {
                            UserId = new Guid("00000000-0000-0000-0000-000000000003"),
                            RoleId = new Guid("00000000-0000-0000-0000-000000000002")
                        },
                        new
                        {
                            UserId = new Guid("00000000-0000-0000-0000-000000000004"),
                            RoleId = new Guid("00000000-0000-0000-0000-000000000002")
                        },
                        new
                        {
                            UserId = new Guid("00000000-0000-0000-0000-000000000005"),
                            RoleId = new Guid("00000000-0000-0000-0000-000000000001")
                        },
                        new
                        {
                            UserId = new Guid("00000000-0000-0000-0000-000000000006"),
                            RoleId = new Guid("00000000-0000-0000-0000-000000000002")
                        },
                        new
                        {
                            UserId = new Guid("00000000-0000-0000-0000-000000000007"),
                            RoleId = new Guid("00000000-0000-0000-0000-000000000002")
                        },
                        new
                        {
                            UserId = new Guid("00000000-0000-0000-0000-000000000008"),
                            RoleId = new Guid("00000000-0000-0000-0000-000000000002")
                        },
                        new
                        {
                            UserId = new Guid("00000000-0000-0000-0000-000000000009"),
                            RoleId = new Guid("00000000-0000-0000-0000-000000000002")
                        },
                        new
                        {
                            UserId = new Guid("00000000-0000-0000-0000-000000000010"),
                            RoleId = new Guid("00000000-0000-0000-0000-000000000002")
                        },
                        new
                        {
                            UserId = new Guid("00000000-0000-0000-0000-000000000011"),
                            RoleId = new Guid("00000000-0000-0000-0000-000000000001")
                        },
                        new
                        {
                            UserId = new Guid("00000000-0000-0000-0000-000000000012"),
                            RoleId = new Guid("00000000-0000-0000-0000-000000000002")
                        },
                        new
                        {
                            UserId = new Guid("00000000-0000-0000-0000-000000000013"),
                            RoleId = new Guid("00000000-0000-0000-0000-000000000002")
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<System.Guid>", b =>
                {
                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("Imi.Project.Api.Core.Entities.Game", b =>
                {
                    b.HasOne("Imi.Project.Api.Core.Entities.Publisher", "Publisher")
                        .WithMany("Games")
                        .HasForeignKey("PublisherId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Publisher");
                });

            modelBuilder.Entity("Imi.Project.Api.Core.Entities.GameGenre", b =>
                {
                    b.HasOne("Imi.Project.Api.Core.Entities.Game", "Game")
                        .WithMany()
                        .HasForeignKey("GameId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Imi.Project.Api.Core.Entities.Genre", "Genre")
                        .WithMany()
                        .HasForeignKey("GenreId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Game");

                    b.Navigation("Genre");
                });

            modelBuilder.Entity("Imi.Project.Api.Core.Entities.UserGame", b =>
                {
                    b.HasOne("Imi.Project.Api.Core.Entities.Game", "Game")
                        .WithMany()
                        .HasForeignKey("GameId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Imi.Project.Api.Core.Entities.ApplicationUser", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Game");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<System.Guid>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole<System.Guid>", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<System.Guid>", b =>
                {
                    b.HasOne("Imi.Project.Api.Core.Entities.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<System.Guid>", b =>
                {
                    b.HasOne("Imi.Project.Api.Core.Entities.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<System.Guid>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole<System.Guid>", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Imi.Project.Api.Core.Entities.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<System.Guid>", b =>
                {
                    b.HasOne("Imi.Project.Api.Core.Entities.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Imi.Project.Api.Core.Entities.Publisher", b =>
                {
                    b.Navigation("Games");
                });
#pragma warning restore 612, 618
        }
    }
}
