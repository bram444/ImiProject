// <auto-generated />
using System;
using Imi.Project.Api.Infrastructure;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace Imi.Project.Api.Infrastructure.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    [Migration("20221119122343_initialMigration")]
    partial class initialMigration
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "6.0.10")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder, 1L, 1);

            modelBuilder.Entity("Imi.Project.Api.Core.Entities.ApplicationUser", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers", (string)null);

                    b.HasData(
                        new
                        {
                            Id = new Guid("00000000-0000-0000-0000-000000000001"),
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "c8554266-b401-4519-9aeb-a9283053fc58",
                            Email = "FirstUser@gmail.com",
                            EmailConfirmed = true,
                            FirstName = "First",
                            LastName = "User",
                            LockoutEnabled = false,
                            NormalizedEmail = "FIRSTUSER@GMAIL.COM",
                            NormalizedUserName = "FIRSTGUY",
                            PasswordHash = "AQAAAAIAAYagAAAAEF9LWVyNjgdTRKLpa41oZT1u6mXsWcehL/9FobM6ObUeb6hUQOdkF8DP6HxUMm2JoQ==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "VVPCRDAS3MJWQD5CSW2GWPRADBXEZINA",
                            TwoFactorEnabled = false,
                            UserName = "FirstGuy"
                        },
                        new
                        {
                            Id = new Guid("00000000-0000-0000-0000-000000000002"),
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "c8554266-b401-4519-9aeb-a9283053fc59",
                            Email = "SecondUser@gmail.com",
                            EmailConfirmed = true,
                            FirstName = "Second",
                            LastName = "User",
                            LockoutEnabled = false,
                            NormalizedEmail = "SECONDUSER@GMAIL.COM",
                            NormalizedUserName = "TIMTHEDESTROYERXX400",
                            PasswordHash = "AQAAAAIAAYagAAAAEHoT7ddMX2eP08ADT/qVyH07gpiAGdqtAQsOd9sSAXgyXynsRlZC3NkZtsD5vUyAdg==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "VVPCRDAS3MJWQD5CSW2GWPRADBXEZINB",
                            TwoFactorEnabled = false,
                            UserName = "TimTheDestroyerXx400"
                        },
                        new
                        {
                            Id = new Guid("00000000-0000-0000-0000-000000000003"),
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "c8554266-b401-4519-9aeb-a9283053fc50",
                            Email = "ThirdUser@gmail.com",
                            EmailConfirmed = true,
                            FirstName = "Third",
                            LastName = "User",
                            LockoutEnabled = false,
                            NormalizedEmail = "THIRDUSER@GMAIL.COM",
                            NormalizedUserName = "USERTHETHIRD",
                            PasswordHash = "AQAAAAIAAYagAAAAEFqgsfkTPGH3IFiY/YxfH2DJD2OUE1oTHKBvBnoVL+16ctamZDkziJB7QqqkUto7mA==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "VVPCRDAS3MJWQD5CSW2GWPRADBXEZINC",
                            TwoFactorEnabled = false,
                            UserName = "UserTheThird"
                        },
                        new
                        {
                            Id = new Guid("00000000-0000-0000-0000-000000000004"),
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "c8554266-b401-4519-9aeb-a9283053fc51",
                            Email = "FourthUser@gmail.com",
                            EmailConfirmed = true,
                            FirstName = "Fourth",
                            LastName = "User",
                            LockoutEnabled = false,
                            NormalizedEmail = "FOURTHUSER@GMAIL.COM",
                            NormalizedUserName = "USERTHEFOURTH",
                            PasswordHash = "AQAAAAIAAYagAAAAEHIgACn99gbqn1oJJY0RA2qH7YiAJ8t5ykpj4hwJpZv9akUwi4kO/oue4fBfztBGOw==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "VVPCRDAS3MJWQD5CSW2GWPRADBXEZIND",
                            TwoFactorEnabled = false,
                            UserName = "UserTheFourth"
                        },
                        new
                        {
                            Id = new Guid("00000000-0000-0000-0000-000000000005"),
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "c8554266-b401-4519-9aeb-a9283053fc52",
                            Email = "FifthUser@gmail.com",
                            EmailConfirmed = true,
                            FirstName = "Fifth",
                            LastName = "User",
                            LockoutEnabled = false,
                            NormalizedEmail = "FIFTHUSER@GMAIL.COM",
                            NormalizedUserName = "USERTHEFIFTH",
                            PasswordHash = "AQAAAAIAAYagAAAAEJzIMZ7+PuwJH4n/HlS64NtVeLM9mIamY6rY7266LFtJW+cVQtUtG89uAKy4bYMrrg==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "VVPCRDAS3MJWQD5CSW2GWPRADBXEZINE",
                            TwoFactorEnabled = false,
                            UserName = "UserTheFifth"
                        },
                        new
                        {
                            Id = new Guid("00000000-0000-0000-0000-000000000006"),
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "c8554266-b401-4519-9aeb-a9283053fc53",
                            Email = "SixUser@gmail.com",
                            EmailConfirmed = true,
                            FirstName = "Six",
                            LastName = "User",
                            LockoutEnabled = false,
                            NormalizedEmail = "SIXUSER@GMAIL.COM",
                            NormalizedUserName = "USERTHESITH",
                            PasswordHash = "AQAAAAIAAYagAAAAEO/C3unPrVxnl+DTmh6n5oydfKPLcYoerdUAdO7cXeZhBD8Sibwd67na9SnqajNRwg==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "VVPCRDAS3MJWQD5CSW2GWPRADBXEZINF",
                            TwoFactorEnabled = false,
                            UserName = "UserTheSith"
                        },
                        new
                        {
                            Id = new Guid("00000000-0000-0000-0000-000000000007"),
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "c8554266-b401-4519-9aeb-a9283053fc54",
                            Email = "SevenUser@gmail.com",
                            EmailConfirmed = true,
                            FirstName = "Seven",
                            LastName = "User",
                            LockoutEnabled = false,
                            NormalizedEmail = "SEVENUSER@GMAIL.COM",
                            NormalizedUserName = "USERTHESEVEN",
                            PasswordHash = "AQAAAAIAAYagAAAAEJH50qqVl6NZYAv2cJ+PFwLD3HULOA8V1nKJI4c8mGf2w9ILDa2X2+XKI6Mk4miEXA==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "VVPCRDAS3MJWQD5CSW2GWPRADBXEZING",
                            TwoFactorEnabled = false,
                            UserName = "UserTheSeven"
                        },
                        new
                        {
                            Id = new Guid("00000000-0000-0000-0000-000000000008"),
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "c8554266-b401-4519-9aeb-a9283053fc55",
                            Email = "EigthUser@gmail.com",
                            EmailConfirmed = true,
                            FirstName = "Eigth",
                            LastName = "User",
                            LockoutEnabled = false,
                            NormalizedEmail = "EIGTHUSER@GMAIL.COM",
                            NormalizedUserName = "USERTHEEIGTH",
                            PasswordHash = "AQAAAAIAAYagAAAAEND4S6e2/NKM/sbHfEC+ici/d96Z7JTlm5iC0aT4rom0Jtvpn+Krbpyb7X/3cixsgA==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "VVPCRDAS3MJWQD5CSW2GWPRADBXEZINH",
                            TwoFactorEnabled = false,
                            UserName = "UserTheEigth"
                        },
                        new
                        {
                            Id = new Guid("00000000-0000-0000-0000-000000000009"),
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "c8554266-b401-4519-9aeb-a9283053fc56",
                            Email = "NinthUser@gmail.com",
                            EmailConfirmed = true,
                            FirstName = "Ninth",
                            LastName = "User",
                            LockoutEnabled = false,
                            NormalizedEmail = "NINTHUSER@GMAIL.COM",
                            NormalizedUserName = "USERTHENINTH",
                            PasswordHash = "AQAAAAIAAYagAAAAEOPHrSulki2OJwjyX1oxaWskM5dedzZpBloc34o/q1zjW1oeksqZDMZTbynz84FWaA==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "VVPCRDAS3MJWQD5CSW2GWPRADBXEZINI",
                            TwoFactorEnabled = false,
                            UserName = "UserTheNinth"
                        },
                        new
                        {
                            Id = new Guid("00000000-0000-0000-0000-000000000010"),
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "c8554266-b401-4519-9aeb-a9283053fc57",
                            Email = "XUser@gmail.com",
                            EmailConfirmed = true,
                            FirstName = "X",
                            LastName = "User",
                            LockoutEnabled = false,
                            NormalizedEmail = "XUSER@GMAIL.COM",
                            NormalizedUserName = "USERX",
                            PasswordHash = "AQAAAAIAAYagAAAAEMTsksRucBFWuoyn58/X/ZLZ2AoLPSm7zg8EdnxodIPb1+iv+brksgXkBaQD9htbmQ==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "VVPCRDAS3MJWQD5CSW2GWPRADBXEZINJ",
                            TwoFactorEnabled = false,
                            UserName = "UserX"
                        });
                });

            modelBuilder.Entity("Imi.Project.Api.Core.Entities.Game", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("LastEditedOn")
                        .HasColumnType("datetime2");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<float>("Price")
                        .HasColumnType("real");

                    b.Property<Guid>("PublisherId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("PublisherId");

                    b.ToTable("Games");

                    b.HasData(
                        new
                        {
                            Id = new Guid("00000000-0000-0000-0000-000000000001"),
                            CreatedOn = new DateTime(2022, 11, 19, 13, 23, 42, 309, DateTimeKind.Local).AddTicks(1459),
                            LastEditedOn = new DateTime(2022, 11, 19, 13, 23, 42, 309, DateTimeKind.Local).AddTicks(1495),
                            Name = "Fallout New Vegas",
                            Price = 14.99f,
                            PublisherId = new Guid("00000000-0000-0000-0000-000000000001")
                        },
                        new
                        {
                            Id = new Guid("00000000-0000-0000-0000-000000000002"),
                            CreatedOn = new DateTime(2022, 11, 19, 13, 23, 42, 309, DateTimeKind.Local).AddTicks(1499),
                            LastEditedOn = new DateTime(2022, 11, 19, 13, 23, 42, 309, DateTimeKind.Local).AddTicks(1501),
                            Name = "Splatoon 3",
                            Price = 59.99f,
                            PublisherId = new Guid("00000000-0000-0000-0000-000000000002")
                        },
                        new
                        {
                            Id = new Guid("00000000-0000-0000-0000-000000000003"),
                            CreatedOn = new DateTime(2022, 11, 19, 13, 23, 42, 309, DateTimeKind.Local).AddTicks(1504),
                            LastEditedOn = new DateTime(2022, 11, 19, 13, 23, 42, 309, DateTimeKind.Local).AddTicks(1505),
                            Name = "Animal Crossing",
                            Price = 59.99f,
                            PublisherId = new Guid("00000000-0000-0000-0000-000000000002")
                        },
                        new
                        {
                            Id = new Guid("00000000-0000-0000-0000-000000000004"),
                            CreatedOn = new DateTime(2022, 11, 19, 13, 23, 42, 309, DateTimeKind.Local).AddTicks(1513),
                            LastEditedOn = new DateTime(2022, 11, 19, 13, 23, 42, 309, DateTimeKind.Local).AddTicks(1515),
                            Name = "Fallout 3",
                            Price = 14.99f,
                            PublisherId = new Guid("00000000-0000-0000-0000-000000000001")
                        },
                        new
                        {
                            Id = new Guid("00000000-0000-0000-0000-000000000005"),
                            CreatedOn = new DateTime(2022, 11, 19, 13, 23, 42, 309, DateTimeKind.Local).AddTicks(1534),
                            LastEditedOn = new DateTime(2022, 11, 19, 13, 23, 42, 309, DateTimeKind.Local).AddTicks(1536),
                            Name = "Fallout 4",
                            Price = 14.99f,
                            PublisherId = new Guid("00000000-0000-0000-0000-000000000001")
                        },
                        new
                        {
                            Id = new Guid("00000000-0000-0000-0000-000000000006"),
                            CreatedOn = new DateTime(2022, 11, 19, 13, 23, 42, 309, DateTimeKind.Local).AddTicks(1545),
                            LastEditedOn = new DateTime(2022, 11, 19, 13, 23, 42, 309, DateTimeKind.Local).AddTicks(1547),
                            Name = "Splatoon 2",
                            Price = 59.99f,
                            PublisherId = new Guid("00000000-0000-0000-0000-000000000002")
                        },
                        new
                        {
                            Id = new Guid("00000000-0000-0000-0000-000000000007"),
                            CreatedOn = new DateTime(2022, 11, 19, 13, 23, 42, 309, DateTimeKind.Local).AddTicks(1550),
                            LastEditedOn = new DateTime(2022, 11, 19, 13, 23, 42, 309, DateTimeKind.Local).AddTicks(1551),
                            Name = "Splatoon",
                            Price = 59.99f,
                            PublisherId = new Guid("00000000-0000-0000-0000-000000000002")
                        },
                        new
                        {
                            Id = new Guid("00000000-0000-0000-0000-000000000008"),
                            CreatedOn = new DateTime(2022, 11, 19, 13, 23, 42, 309, DateTimeKind.Local).AddTicks(1594),
                            LastEditedOn = new DateTime(2022, 11, 19, 13, 23, 42, 309, DateTimeKind.Local).AddTicks(1620),
                            Name = "Rabbits",
                            Price = 59.99f,
                            PublisherId = new Guid("00000000-0000-0000-0000-000000000003")
                        },
                        new
                        {
                            Id = new Guid("00000000-0000-0000-0000-000000000009"),
                            CreatedOn = new DateTime(2022, 11, 19, 13, 23, 42, 309, DateTimeKind.Local).AddTicks(1623),
                            LastEditedOn = new DateTime(2022, 11, 19, 13, 23, 42, 309, DateTimeKind.Local).AddTicks(1625),
                            Name = "Rayman",
                            Price = 59.99f,
                            PublisherId = new Guid("00000000-0000-0000-0000-000000000003")
                        },
                        new
                        {
                            Id = new Guid("00000000-0000-0000-0000-000000000010"),
                            CreatedOn = new DateTime(2022, 11, 19, 13, 23, 42, 309, DateTimeKind.Local).AddTicks(1628),
                            LastEditedOn = new DateTime(2022, 11, 19, 13, 23, 42, 309, DateTimeKind.Local).AddTicks(1629),
                            Name = "Assassins creed",
                            Price = 59.99f,
                            PublisherId = new Guid("00000000-0000-0000-0000-000000000003")
                        });
                });

            modelBuilder.Entity("Imi.Project.Api.Core.Entities.GameGenre", b =>
                {
                    b.Property<Guid>("GenreId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("GameId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("GenreId", "GameId");

                    b.HasIndex("GameId");

                    b.ToTable("GamesGenre");

                    b.HasData(
                        new
                        {
                            GenreId = new Guid("00000000-0000-0000-0000-000000000001"),
                            GameId = new Guid("00000000-0000-0000-0000-000000000001")
                        },
                        new
                        {
                            GenreId = new Guid("00000000-0000-0000-0000-000000000002"),
                            GameId = new Guid("00000000-0000-0000-0000-000000000001")
                        },
                        new
                        {
                            GenreId = new Guid("00000000-0000-0000-0000-000000000002"),
                            GameId = new Guid("00000000-0000-0000-0000-000000000002")
                        },
                        new
                        {
                            GenreId = new Guid("00000000-0000-0000-0000-000000000003"),
                            GameId = new Guid("00000000-0000-0000-0000-000000000003")
                        },
                        new
                        {
                            GenreId = new Guid("00000000-0000-0000-0000-000000000007"),
                            GameId = new Guid("00000000-0000-0000-0000-000000000004")
                        },
                        new
                        {
                            GenreId = new Guid("00000000-0000-0000-0000-000000000008"),
                            GameId = new Guid("00000000-0000-0000-0000-000000000004")
                        },
                        new
                        {
                            GenreId = new Guid("00000000-0000-0000-0000-000000000009"),
                            GameId = new Guid("00000000-0000-0000-0000-000000000010")
                        },
                        new
                        {
                            GenreId = new Guid("00000000-0000-0000-0000-000000000010"),
                            GameId = new Guid("00000000-0000-0000-0000-000000000010")
                        },
                        new
                        {
                            GenreId = new Guid("00000000-0000-0000-0000-000000000002"),
                            GameId = new Guid("00000000-0000-0000-0000-000000000006")
                        },
                        new
                        {
                            GenreId = new Guid("00000000-0000-0000-0000-000000000002"),
                            GameId = new Guid("00000000-0000-0000-0000-000000000007")
                        });
                });

            modelBuilder.Entity("Imi.Project.Api.Core.Entities.Genre", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("LastEditedOn")
                        .HasColumnType("datetime2");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Genres");

                    b.HasData(
                        new
                        {
                            Id = new Guid("00000000-0000-0000-0000-000000000001"),
                            CreatedOn = new DateTime(2022, 11, 19, 13, 23, 42, 309, DateTimeKind.Local).AddTicks(1657),
                            Description = "Fist person shooter",
                            LastEditedOn = new DateTime(2022, 11, 19, 13, 23, 42, 309, DateTimeKind.Local).AddTicks(1654),
                            Name = "FPS"
                        },
                        new
                        {
                            Id = new Guid("00000000-0000-0000-0000-000000000002"),
                            CreatedOn = new DateTime(2022, 11, 19, 13, 23, 42, 309, DateTimeKind.Local).AddTicks(1661),
                            Description = "Fist person shooter but in the third person",
                            LastEditedOn = new DateTime(2022, 11, 19, 13, 23, 42, 309, DateTimeKind.Local).AddTicks(1659),
                            Name = "Third person shooter"
                        },
                        new
                        {
                            Id = new Guid("00000000-0000-0000-0000-000000000003"),
                            CreatedOn = new DateTime(2022, 11, 19, 13, 23, 42, 309, DateTimeKind.Local).AddTicks(1665),
                            LastEditedOn = new DateTime(2022, 11, 19, 13, 23, 42, 309, DateTimeKind.Local).AddTicks(1663),
                            Name = "Simulation"
                        },
                        new
                        {
                            Id = new Guid("00000000-0000-0000-0000-000000000004"),
                            CreatedOn = new DateTime(2022, 11, 19, 13, 23, 42, 309, DateTimeKind.Local).AddTicks(1671),
                            LastEditedOn = new DateTime(2022, 11, 19, 13, 23, 42, 309, DateTimeKind.Local).AddTicks(1670),
                            Name = "Platformer"
                        },
                        new
                        {
                            Id = new Guid("00000000-0000-0000-0000-000000000005"),
                            CreatedOn = new DateTime(2022, 11, 19, 13, 23, 42, 309, DateTimeKind.Local).AddTicks(1677),
                            LastEditedOn = new DateTime(2022, 11, 19, 13, 23, 42, 309, DateTimeKind.Local).AddTicks(1674),
                            Name = "Party game"
                        },
                        new
                        {
                            Id = new Guid("00000000-0000-0000-0000-000000000006"),
                            CreatedOn = new DateTime(2022, 11, 19, 13, 23, 42, 309, DateTimeKind.Local).AddTicks(1704),
                            LastEditedOn = new DateTime(2022, 11, 19, 13, 23, 42, 309, DateTimeKind.Local).AddTicks(1702),
                            Name = "Story driven"
                        },
                        new
                        {
                            Id = new Guid("00000000-0000-0000-0000-000000000007"),
                            CreatedOn = new DateTime(2022, 11, 19, 13, 23, 42, 309, DateTimeKind.Local).AddTicks(1708),
                            LastEditedOn = new DateTime(2022, 11, 19, 13, 23, 42, 309, DateTimeKind.Local).AddTicks(1706),
                            Name = "Open Word"
                        },
                        new
                        {
                            Id = new Guid("00000000-0000-0000-0000-000000000008"),
                            CreatedOn = new DateTime(2022, 11, 19, 13, 23, 42, 309, DateTimeKind.Local).AddTicks(1712),
                            LastEditedOn = new DateTime(2022, 11, 19, 13, 23, 42, 309, DateTimeKind.Local).AddTicks(1710),
                            Name = "Nonlinear gameplay"
                        },
                        new
                        {
                            Id = new Guid("00000000-0000-0000-0000-000000000009"),
                            CreatedOn = new DateTime(2022, 11, 19, 13, 23, 42, 309, DateTimeKind.Local).AddTicks(1715),
                            LastEditedOn = new DateTime(2022, 11, 19, 13, 23, 42, 309, DateTimeKind.Local).AddTicks(1714),
                            Name = "Action-adventure"
                        },
                        new
                        {
                            Id = new Guid("00000000-0000-0000-0000-000000000010"),
                            CreatedOn = new DateTime(2022, 11, 19, 13, 23, 42, 309, DateTimeKind.Local).AddTicks(1719),
                            LastEditedOn = new DateTime(2022, 11, 19, 13, 23, 42, 309, DateTimeKind.Local).AddTicks(1718),
                            Name = "Stealth"
                        });
                });

            modelBuilder.Entity("Imi.Project.Api.Core.Entities.Publisher", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Country")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("LastEditedOn")
                        .HasColumnType("datetime2");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Publishers");

                    b.HasData(
                        new
                        {
                            Id = new Guid("00000000-0000-0000-0000-000000000001"),
                            Country = "America",
                            CreatedOn = new DateTime(2022, 11, 19, 13, 23, 42, 309, DateTimeKind.Local).AddTicks(1743),
                            LastEditedOn = new DateTime(2022, 11, 19, 13, 23, 42, 309, DateTimeKind.Local).AddTicks(1746),
                            Name = "Bethesda"
                        },
                        new
                        {
                            Id = new Guid("00000000-0000-0000-0000-000000000002"),
                            Country = "Japan",
                            CreatedOn = new DateTime(2022, 11, 19, 13, 23, 42, 309, DateTimeKind.Local).AddTicks(1748),
                            LastEditedOn = new DateTime(2022, 11, 19, 13, 23, 42, 309, DateTimeKind.Local).AddTicks(1750),
                            Name = "Nintendo"
                        },
                        new
                        {
                            Id = new Guid("00000000-0000-0000-0000-000000000003"),
                            Country = "America",
                            CreatedOn = new DateTime(2022, 11, 19, 13, 23, 42, 309, DateTimeKind.Local).AddTicks(1752),
                            LastEditedOn = new DateTime(2022, 11, 19, 13, 23, 42, 309, DateTimeKind.Local).AddTicks(1754),
                            Name = "Ubisoft"
                        },
                        new
                        {
                            Id = new Guid("00000000-0000-0000-0000-000000000004"),
                            Country = "Japan",
                            CreatedOn = new DateTime(2022, 11, 19, 13, 23, 42, 309, DateTimeKind.Local).AddTicks(1756),
                            LastEditedOn = new DateTime(2022, 11, 19, 13, 23, 42, 309, DateTimeKind.Local).AddTicks(1758),
                            Name = "Square inex"
                        },
                        new
                        {
                            Id = new Guid("00000000-0000-0000-0000-000000000005"),
                            Country = "America",
                            CreatedOn = new DateTime(2022, 11, 19, 13, 23, 42, 309, DateTimeKind.Local).AddTicks(1760),
                            LastEditedOn = new DateTime(2022, 11, 19, 13, 23, 42, 309, DateTimeKind.Local).AddTicks(1762),
                            Name = "Sony"
                        },
                        new
                        {
                            Id = new Guid("00000000-0000-0000-0000-000000000006"),
                            Country = "America",
                            CreatedOn = new DateTime(2022, 11, 19, 13, 23, 42, 309, DateTimeKind.Local).AddTicks(1764),
                            LastEditedOn = new DateTime(2022, 11, 19, 13, 23, 42, 309, DateTimeKind.Local).AddTicks(1765),
                            Name = "Microsoft"
                        },
                        new
                        {
                            Id = new Guid("00000000-0000-0000-0000-000000000007"),
                            Country = "Japan",
                            CreatedOn = new DateTime(2022, 11, 19, 13, 23, 42, 309, DateTimeKind.Local).AddTicks(1768),
                            LastEditedOn = new DateTime(2022, 11, 19, 13, 23, 42, 309, DateTimeKind.Local).AddTicks(1769),
                            Name = "The pokemon company"
                        },
                        new
                        {
                            Id = new Guid("00000000-0000-0000-0000-000000000008"),
                            Country = "Sweden",
                            CreatedOn = new DateTime(2022, 11, 19, 13, 23, 42, 309, DateTimeKind.Local).AddTicks(1772),
                            LastEditedOn = new DateTime(2022, 11, 19, 13, 23, 42, 309, DateTimeKind.Local).AddTicks(1773),
                            Name = "CD project"
                        },
                        new
                        {
                            Id = new Guid("00000000-0000-0000-0000-000000000009"),
                            Country = "Japan",
                            CreatedOn = new DateTime(2022, 11, 19, 13, 23, 42, 309, DateTimeKind.Local).AddTicks(1775),
                            LastEditedOn = new DateTime(2022, 11, 19, 13, 23, 42, 309, DateTimeKind.Local).AddTicks(1777),
                            Name = "Arc System Works"
                        },
                        new
                        {
                            Id = new Guid("00000000-0000-0000-0000-000000000010"),
                            Country = "America",
                            CreatedOn = new DateTime(2022, 11, 19, 13, 23, 42, 309, DateTimeKind.Local).AddTicks(1779),
                            LastEditedOn = new DateTime(2022, 11, 19, 13, 23, 42, 309, DateTimeKind.Local).AddTicks(1781),
                            Name = "Interplay Entertainment"
                        });
                });

            modelBuilder.Entity("Imi.Project.Api.Core.Entities.UserGame", b =>
                {
                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("GameId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("UserId", "GameId");

                    b.HasIndex("GameId");

                    b.ToTable("UsersGames");

                    b.HasData(
                        new
                        {
                            UserId = new Guid("00000000-0000-0000-0000-000000000002"),
                            GameId = new Guid("00000000-0000-0000-0000-000000000001")
                        },
                        new
                        {
                            UserId = new Guid("00000000-0000-0000-0000-000000000002"),
                            GameId = new Guid("00000000-0000-0000-0000-000000000002")
                        },
                        new
                        {
                            UserId = new Guid("00000000-0000-0000-0000-000000000002"),
                            GameId = new Guid("00000000-0000-0000-0000-000000000003")
                        },
                        new
                        {
                            UserId = new Guid("00000000-0000-0000-0000-000000000001"),
                            GameId = new Guid("00000000-0000-0000-0000-000000000003")
                        },
                        new
                        {
                            UserId = new Guid("00000000-0000-0000-0000-000000000004"),
                            GameId = new Guid("00000000-0000-0000-0000-000000000004")
                        },
                        new
                        {
                            UserId = new Guid("00000000-0000-0000-0000-000000000005"),
                            GameId = new Guid("00000000-0000-0000-0000-000000000005")
                        },
                        new
                        {
                            UserId = new Guid("00000000-0000-0000-0000-000000000006"),
                            GameId = new Guid("00000000-0000-0000-0000-000000000006")
                        },
                        new
                        {
                            UserId = new Guid("00000000-0000-0000-0000-000000000007"),
                            GameId = new Guid("00000000-0000-0000-0000-000000000007")
                        },
                        new
                        {
                            UserId = new Guid("00000000-0000-0000-0000-000000000008"),
                            GameId = new Guid("00000000-0000-0000-0000-000000000008")
                        },
                        new
                        {
                            UserId = new Guid("00000000-0000-0000-0000-000000000009"),
                            GameId = new Guid("00000000-0000-0000-0000-000000000009")
                        },
                        new
                        {
                            UserId = new Guid("00000000-0000-0000-0000-000000000009"),
                            GameId = new Guid("00000000-0000-0000-0000-000000000008")
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole<System.Guid>", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles", (string)null);

                    b.HasData(
                        new
                        {
                            Id = new Guid("00000000-0000-0000-0000-000000000001"),
                            Name = "Admin",
                            NormalizedName = "ADMIN"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<System.Guid>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("RoleId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<System.Guid>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<System.Guid>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<System.Guid>", b =>
                {
                    b.Property<Guid>("RoleId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("RoleId", "UserId");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserRoles", (string)null);

                    b.HasData(
                        new
                        {
                            RoleId = new Guid("00000000-0000-0000-0000-000000000001"),
                            UserId = new Guid("00000000-0000-0000-0000-000000000001")
                        },
                        new
                        {
                            RoleId = new Guid("00000000-0000-0000-0000-000000000001"),
                            UserId = new Guid("00000000-0000-0000-0000-000000000005")
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<System.Guid>", b =>
                {
                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("Imi.Project.Api.Core.Entities.Game", b =>
                {
                    b.HasOne("Imi.Project.Api.Core.Entities.Publisher", "Publisher")
                        .WithMany("Games")
                        .HasForeignKey("PublisherId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Publisher");
                });

            modelBuilder.Entity("Imi.Project.Api.Core.Entities.GameGenre", b =>
                {
                    b.HasOne("Imi.Project.Api.Core.Entities.Game", "Game")
                        .WithMany()
                        .HasForeignKey("GameId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Imi.Project.Api.Core.Entities.Genre", "Genre")
                        .WithMany()
                        .HasForeignKey("GenreId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Game");

                    b.Navigation("Genre");
                });

            modelBuilder.Entity("Imi.Project.Api.Core.Entities.UserGame", b =>
                {
                    b.HasOne("Imi.Project.Api.Core.Entities.Game", "Game")
                        .WithMany()
                        .HasForeignKey("GameId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Imi.Project.Api.Core.Entities.ApplicationUser", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Game");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<System.Guid>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole<System.Guid>", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<System.Guid>", b =>
                {
                    b.HasOne("Imi.Project.Api.Core.Entities.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<System.Guid>", b =>
                {
                    b.HasOne("Imi.Project.Api.Core.Entities.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<System.Guid>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole<System.Guid>", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Imi.Project.Api.Core.Entities.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<System.Guid>", b =>
                {
                    b.HasOne("Imi.Project.Api.Core.Entities.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Imi.Project.Api.Core.Entities.Publisher", b =>
                {
                    b.Navigation("Games");
                });
#pragma warning restore 612, 618
        }
    }
}
