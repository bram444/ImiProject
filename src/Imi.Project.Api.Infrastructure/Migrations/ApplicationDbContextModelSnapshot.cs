// <auto-generated />
using System;
using Imi.Project.Api.Infrastructure.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace Imi.Project.Api.Infrastructure.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    partial class ApplicationDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "6.0.11")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder, 1L, 1);

            modelBuilder.Entity("Imi.Project.Api.Core.Entities.ApplicationUser", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<bool>("ApprovedTerms")
                        .HasColumnType("bit");

                    b.Property<DateTime>("BirthDay")
                        .HasColumnType("datetime2");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("FirstName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("LastName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("Email")
                        .IsUnique()
                        .HasFilter("[Email] IS NOT NULL");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.HasIndex("UserName")
                        .IsUnique()
                        .HasFilter("[UserName] IS NOT NULL");

                    b.ToTable("AspNetUsers", (string)null);

                    b.HasData(
                        new
                        {
                            Id = new Guid("00000000-0000-0000-0000-000000000001"),
                            AccessFailedCount = 0,
                            ApprovedTerms = true,
                            BirthDay = new DateTime(2023, 1, 12, 16, 45, 15, 706, DateTimeKind.Local).AddTicks(240),
                            ConcurrencyStamp = "9b079be3-a76a-424b-b623-f8569803b9c9",
                            Email = "FirstUser@gmail.com",
                            EmailConfirmed = true,
                            FirstName = "First",
                            LastName = "User",
                            LockoutEnabled = false,
                            NormalizedEmail = "FirstUser@gmail.com",
                            NormalizedUserName = "FirstGuy",
                            PasswordHash = "AQAAAAEAACcQAAAAEPlj62M7z88QEsBt2lMXAmNUVMZcxsk2diiBNshkS+J3ktWqWIxnrcJwahodQbS9Zw==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "375cfc97-2196-42a8-9ae6-b72e693690ae",
                            TwoFactorEnabled = false,
                            UserName = "FirstGuy"
                        },
                        new
                        {
                            Id = new Guid("00000000-0000-0000-0000-000000000002"),
                            AccessFailedCount = 0,
                            ApprovedTerms = true,
                            BirthDay = new DateTime(2000, 8, 19, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            ConcurrencyStamp = "7a0bda3a-f0bb-4c4d-b4a4-fc9533e9d294",
                            Email = "SecondUser@gmail.com",
                            EmailConfirmed = true,
                            FirstName = "Second",
                            LastName = "User",
                            LockoutEnabled = false,
                            NormalizedEmail = "SecondUser@gmail.com",
                            NormalizedUserName = "TimTheDestroyerXx400",
                            PasswordHash = "AQAAAAEAACcQAAAAEJKYLHoGP1WsCMel3/OV9t6aURughdZ8H9W5VbXjenbPYDNhEy08xaz7EjbhrZmshw==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "37c88383-73c0-453f-a9f5-74f0727c1087",
                            TwoFactorEnabled = false,
                            UserName = "TimTheDestroyerXx400"
                        },
                        new
                        {
                            Id = new Guid("00000000-0000-0000-0000-000000000003"),
                            AccessFailedCount = 0,
                            ApprovedTerms = true,
                            BirthDay = new DateTime(2010, 8, 19, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            ConcurrencyStamp = "3dc66ad3-cc5b-483f-b957-59cbb1dfaa12",
                            Email = "ThirdUser@gmail.com",
                            EmailConfirmed = true,
                            FirstName = "Third",
                            LastName = "User",
                            LockoutEnabled = false,
                            NormalizedEmail = "ThirdUser@gmail.com",
                            NormalizedUserName = "UserTheThird",
                            PasswordHash = "AQAAAAEAACcQAAAAEPYbayP1m1yWGCeyNAUGHx839S3XWLek4yhZjw57v/U8DDnYrF5PRsMA6K4j0QF8Ug==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "30c24e87-2662-4cd3-98c1-5e714cf9de93",
                            TwoFactorEnabled = false,
                            UserName = "UserTheThird"
                        },
                        new
                        {
                            Id = new Guid("00000000-0000-0000-0000-000000000004"),
                            AccessFailedCount = 0,
                            ApprovedTerms = true,
                            BirthDay = new DateTime(2010, 8, 19, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            ConcurrencyStamp = "8688fc12-4905-4e1d-8aa4-d58e9188601e",
                            Email = "FourthUser@gmail.com",
                            EmailConfirmed = true,
                            FirstName = "Fourth",
                            LastName = "User",
                            LockoutEnabled = false,
                            NormalizedEmail = "FourthUser@gmail.com",
                            NormalizedUserName = "UserTheFourth",
                            PasswordHash = "AQAAAAEAACcQAAAAED11wD/LkBTlDH0l7DRQCJDnxZVhujSwObWfo13noB1SDoTjGxBzL2KixhDltCwnVw==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "7948acbd-997b-4c8d-a7e6-790951ec0700",
                            TwoFactorEnabled = false,
                            UserName = "UserTheFourth"
                        },
                        new
                        {
                            Id = new Guid("00000000-0000-0000-0000-000000000005"),
                            AccessFailedCount = 0,
                            ApprovedTerms = true,
                            BirthDay = new DateTime(2010, 8, 19, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            ConcurrencyStamp = "80b96a62-8410-46d0-b395-a988c090bb2c",
                            Email = "FifthUser@gmail.com",
                            EmailConfirmed = true,
                            FirstName = "Fifth",
                            LastName = "User",
                            LockoutEnabled = false,
                            NormalizedEmail = "FifthUser@gmail.com",
                            NormalizedUserName = "UserTheFifth",
                            PasswordHash = "AQAAAAEAACcQAAAAEPVpCLtj0vtacBWB0y1ho1Y+PhYmyewCDGw5tcZOUsGosJG0itK2x4bhlyAFhJ+D4Q==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "0b146fc2-77a2-4327-a019-62ef57d889f3",
                            TwoFactorEnabled = false,
                            UserName = "UserTheFifth"
                        },
                        new
                        {
                            Id = new Guid("00000000-0000-0000-0000-000000000006"),
                            AccessFailedCount = 0,
                            ApprovedTerms = true,
                            BirthDay = new DateTime(2010, 8, 19, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            ConcurrencyStamp = "20cb60ed-b490-4825-b2f4-c3d4996a6d35",
                            Email = "SixUser@gmail.com",
                            EmailConfirmed = true,
                            FirstName = "Six",
                            LastName = "User",
                            LockoutEnabled = false,
                            NormalizedEmail = "SixUser@gmail.com",
                            NormalizedUserName = "UserTheSith",
                            PasswordHash = "AQAAAAEAACcQAAAAEP+F6xDuAygBa70UeiCPQHoAKO6oxSrNUKncSgqj1UBlQRO8kPIMRybUv0FN2eHAjg==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "a159573c-0c25-4639-a163-3540a1c1d026",
                            TwoFactorEnabled = false,
                            UserName = "UserTheSith"
                        },
                        new
                        {
                            Id = new Guid("00000000-0000-0000-0000-000000000007"),
                            AccessFailedCount = 0,
                            ApprovedTerms = true,
                            BirthDay = new DateTime(2010, 8, 19, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            ConcurrencyStamp = "22936fd6-00a0-41ba-89a1-a779ace837c6",
                            Email = "SevenUser@gmail.com",
                            EmailConfirmed = true,
                            FirstName = "Seven",
                            LastName = "User",
                            LockoutEnabled = false,
                            NormalizedEmail = "SevenUser@gmail.com",
                            NormalizedUserName = "UserTheSeven",
                            PasswordHash = "AQAAAAEAACcQAAAAEOz3HUsGbU8Aywbsi7YFlbN3iB+xBEX0KxMKRK0OyCGcj39vON40cNKbn+YYHYu+8A==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "0a162951-c3d5-4e25-8ef0-80d2e3ad250a",
                            TwoFactorEnabled = false,
                            UserName = "UserTheSeven"
                        },
                        new
                        {
                            Id = new Guid("00000000-0000-0000-0000-000000000008"),
                            AccessFailedCount = 0,
                            ApprovedTerms = true,
                            BirthDay = new DateTime(2010, 8, 19, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            ConcurrencyStamp = "54608937-0153-4658-8528-c2ccfd380839",
                            Email = "EigthUser@gmail.com",
                            EmailConfirmed = true,
                            FirstName = "Eigth",
                            LastName = "User",
                            LockoutEnabled = false,
                            NormalizedEmail = "EigthUser@gmail.com",
                            NormalizedUserName = "UserTheEigth",
                            PasswordHash = "AQAAAAEAACcQAAAAEMCXJeHDesfnyvhr4y7hALgRogOEaV5sb2wH01ytnqUk+rViuXuohVkomuSj0LE67w==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "565cf2dd-ac0b-4151-91d4-70e3642941db",
                            TwoFactorEnabled = false,
                            UserName = "UserTheEigth"
                        },
                        new
                        {
                            Id = new Guid("00000000-0000-0000-0000-000000000009"),
                            AccessFailedCount = 0,
                            ApprovedTerms = true,
                            BirthDay = new DateTime(2010, 8, 19, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            ConcurrencyStamp = "cdf6cc0f-9ff5-4d33-b05d-f66a4a6969b0",
                            Email = "NinthUser@gmail.com",
                            EmailConfirmed = true,
                            FirstName = "Ninth",
                            LastName = "User",
                            LockoutEnabled = false,
                            NormalizedEmail = "NinthUser@gmail.com",
                            NormalizedUserName = "UserTheNinth",
                            PasswordHash = "AQAAAAEAACcQAAAAEALzKkGE4j4LE7sdYOWNzbQdQJk5XTk1qiYGoSBPv6F5bZ+Bov7Swc7XzSiYvBjvzQ==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "91309b8c-54be-4572-b79d-87100ed19e30",
                            TwoFactorEnabled = false,
                            UserName = "UserTheNinth"
                        },
                        new
                        {
                            Id = new Guid("00000000-0000-0000-0000-000000000010"),
                            AccessFailedCount = 0,
                            ApprovedTerms = true,
                            BirthDay = new DateTime(2010, 8, 19, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            ConcurrencyStamp = "2708897e-c46b-48e9-bb1d-88426b2b46e5",
                            Email = "XUser@gmail.com",
                            EmailConfirmed = true,
                            FirstName = "X",
                            LastName = "User",
                            LockoutEnabled = false,
                            NormalizedEmail = "XUser@gmail.com",
                            NormalizedUserName = "UserX",
                            PasswordHash = "AQAAAAEAACcQAAAAELI5A0+NvUYqrfiag3UZMh2xvK9jW8KNsZ3gaPMeOWkKFxWGZB9cpOHHI0QtfaVo0Q==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "b5aaaa42-d6a5-4f31-9411-fedc1dc8c51c",
                            TwoFactorEnabled = false,
                            UserName = "UserX"
                        },
                        new
                        {
                            Id = new Guid("00000000-0000-0000-0000-000000000011"),
                            AccessFailedCount = 0,
                            ApprovedTerms = true,
                            BirthDay = new DateTime(2010, 8, 19, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            ConcurrencyStamp = "a2021090-1737-4693-8c08-f173e540ebaa",
                            Email = "admin@imi.be",
                            EmailConfirmed = true,
                            FirstName = "ad",
                            LastName = "min",
                            LockoutEnabled = false,
                            NormalizedEmail = "admin@imi.be",
                            NormalizedUserName = "admin",
                            PasswordHash = "AQAAAAEAACcQAAAAEBe1TdBLpgRA9vgPRhYikPAt4ZPH92AcwJp9vqMCYMr1IZkOyhCrGQXO/glgw3/bBg==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "9d8a609e-b141-4afa-a99f-1374c26bf807",
                            TwoFactorEnabled = false,
                            UserName = "admin"
                        },
                        new
                        {
                            Id = new Guid("00000000-0000-0000-0000-000000000012"),
                            AccessFailedCount = 0,
                            ApprovedTerms = true,
                            BirthDay = new DateTime(2010, 8, 19, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            ConcurrencyStamp = "039e9f25-1a71-4980-a40c-142b914d384e",
                            Email = "user@imi.be",
                            EmailConfirmed = true,
                            FirstName = "us",
                            LastName = "er",
                            LockoutEnabled = false,
                            NormalizedEmail = "user@imi.be",
                            NormalizedUserName = "user",
                            PasswordHash = "AQAAAAEAACcQAAAAEAl1tVxWxXkQe/zJkdsyVZCsfw9zbXFDKyefo6C5p4PSTKc0mJYWuL8rgMv3zj3HuA==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "6459704b-a7b3-4c93-8731-d669b3833672",
                            TwoFactorEnabled = false,
                            UserName = "user"
                        },
                        new
                        {
                            Id = new Guid("00000000-0000-0000-0000-000000000013"),
                            AccessFailedCount = 0,
                            ApprovedTerms = false,
                            BirthDay = new DateTime(2010, 8, 19, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            ConcurrencyStamp = "039c9b51-0319-4822-83df-aec66178eb4f",
                            Email = "refuser@imi.be",
                            EmailConfirmed = true,
                            FirstName = "ref",
                            LastName = "user",
                            LockoutEnabled = false,
                            NormalizedEmail = "refuser@imi.be",
                            NormalizedUserName = "refuser",
                            PasswordHash = "AQAAAAEAACcQAAAAEMxAcCgQqj7c52/h/dFaccL1mgLty4fY+dA8RBjH1j0QXng3ITYSOigcm15zF7Xm6g==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "57c0e518-8af8-469e-a707-af3f5466b5e4",
                            TwoFactorEnabled = false,
                            UserName = "refuser"
                        });
                });

            modelBuilder.Entity("Imi.Project.Api.Core.Entities.Game", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(450)");

                    b.Property<float>("Price")
                        .HasColumnType("real");

                    b.Property<Guid>("PublisherId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("Name")
                        .IsUnique()
                        .HasFilter("[Name] IS NOT NULL");

                    b.HasIndex("PublisherId");

                    b.ToTable("Games");

                    b.HasData(
                        new
                        {
                            Id = new Guid("00000000-0000-0000-0000-000000000001"),
                            Name = "Fallout New Vegas",
                            Price = 14.99f,
                            PublisherId = new Guid("00000000-0000-0000-0000-000000000001")
                        },
                        new
                        {
                            Id = new Guid("00000000-0000-0000-0000-000000000002"),
                            Name = "Splatoon 3",
                            Price = 59.99f,
                            PublisherId = new Guid("00000000-0000-0000-0000-000000000002")
                        },
                        new
                        {
                            Id = new Guid("00000000-0000-0000-0000-000000000003"),
                            Name = "Animal Crossing",
                            Price = 59.99f,
                            PublisherId = new Guid("00000000-0000-0000-0000-000000000002")
                        },
                        new
                        {
                            Id = new Guid("00000000-0000-0000-0000-000000000004"),
                            Name = "Fallout 3",
                            Price = 14.99f,
                            PublisherId = new Guid("00000000-0000-0000-0000-000000000001")
                        },
                        new
                        {
                            Id = new Guid("00000000-0000-0000-0000-000000000005"),
                            Name = "Fallout 4",
                            Price = 14.99f,
                            PublisherId = new Guid("00000000-0000-0000-0000-000000000001")
                        },
                        new
                        {
                            Id = new Guid("00000000-0000-0000-0000-000000000006"),
                            Name = "Splatoon 2",
                            Price = 59.99f,
                            PublisherId = new Guid("00000000-0000-0000-0000-000000000002")
                        },
                        new
                        {
                            Id = new Guid("00000000-0000-0000-0000-000000000007"),
                            Name = "Splatoon",
                            Price = 59.99f,
                            PublisherId = new Guid("00000000-0000-0000-0000-000000000002")
                        },
                        new
                        {
                            Id = new Guid("00000000-0000-0000-0000-000000000008"),
                            Name = "Rabbits",
                            Price = 59.99f,
                            PublisherId = new Guid("00000000-0000-0000-0000-000000000003")
                        },
                        new
                        {
                            Id = new Guid("00000000-0000-0000-0000-000000000009"),
                            Name = "Rayman",
                            Price = 59.99f,
                            PublisherId = new Guid("00000000-0000-0000-0000-000000000003")
                        },
                        new
                        {
                            Id = new Guid("00000000-0000-0000-0000-000000000010"),
                            Name = "Assassins creed",
                            Price = 59.99f,
                            PublisherId = new Guid("00000000-0000-0000-0000-000000000003")
                        });
                });

            modelBuilder.Entity("Imi.Project.Api.Core.Entities.GameGenre", b =>
                {
                    b.Property<Guid>("GenreId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("GameId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("GenreId", "GameId");

                    b.HasIndex("GameId");

                    b.ToTable("GamesGenre");

                    b.HasData(
                        new
                        {
                            GenreId = new Guid("00000000-0000-0000-0000-000000000001"),
                            GameId = new Guid("00000000-0000-0000-0000-000000000001")
                        },
                        new
                        {
                            GenreId = new Guid("00000000-0000-0000-0000-000000000002"),
                            GameId = new Guid("00000000-0000-0000-0000-000000000001")
                        },
                        new
                        {
                            GenreId = new Guid("00000000-0000-0000-0000-000000000002"),
                            GameId = new Guid("00000000-0000-0000-0000-000000000002")
                        },
                        new
                        {
                            GenreId = new Guid("00000000-0000-0000-0000-000000000003"),
                            GameId = new Guid("00000000-0000-0000-0000-000000000003")
                        },
                        new
                        {
                            GenreId = new Guid("00000000-0000-0000-0000-000000000007"),
                            GameId = new Guid("00000000-0000-0000-0000-000000000004")
                        },
                        new
                        {
                            GenreId = new Guid("00000000-0000-0000-0000-000000000008"),
                            GameId = new Guid("00000000-0000-0000-0000-000000000004")
                        },
                        new
                        {
                            GenreId = new Guid("00000000-0000-0000-0000-000000000009"),
                            GameId = new Guid("00000000-0000-0000-0000-000000000010")
                        },
                        new
                        {
                            GenreId = new Guid("00000000-0000-0000-0000-000000000010"),
                            GameId = new Guid("00000000-0000-0000-0000-000000000010")
                        },
                        new
                        {
                            GenreId = new Guid("00000000-0000-0000-0000-000000000002"),
                            GameId = new Guid("00000000-0000-0000-0000-000000000006")
                        },
                        new
                        {
                            GenreId = new Guid("00000000-0000-0000-0000-000000000002"),
                            GameId = new Guid("00000000-0000-0000-0000-000000000007")
                        });
                });

            modelBuilder.Entity("Imi.Project.Api.Core.Entities.Genre", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("Name")
                        .IsUnique()
                        .HasFilter("[Name] IS NOT NULL");

                    b.ToTable("Genres");

                    b.HasData(
                        new
                        {
                            Id = new Guid("00000000-0000-0000-0000-000000000001"),
                            Description = "Fist person shooter",
                            Name = "FPS"
                        },
                        new
                        {
                            Id = new Guid("00000000-0000-0000-0000-000000000002"),
                            Description = "Fist person shooter but in the third person",
                            Name = "Third person shooter"
                        },
                        new
                        {
                            Id = new Guid("00000000-0000-0000-0000-000000000003"),
                            Name = "Simulation"
                        },
                        new
                        {
                            Id = new Guid("00000000-0000-0000-0000-000000000004"),
                            Name = "Platformer"
                        },
                        new
                        {
                            Id = new Guid("00000000-0000-0000-0000-000000000005"),
                            Name = "Party game"
                        },
                        new
                        {
                            Id = new Guid("00000000-0000-0000-0000-000000000006"),
                            Name = "Story driven"
                        },
                        new
                        {
                            Id = new Guid("00000000-0000-0000-0000-000000000007"),
                            Name = "Open Word"
                        },
                        new
                        {
                            Id = new Guid("00000000-0000-0000-0000-000000000008"),
                            Name = "Nonlinear gameplay"
                        },
                        new
                        {
                            Id = new Guid("00000000-0000-0000-0000-000000000009"),
                            Name = "Action-adventure"
                        },
                        new
                        {
                            Id = new Guid("00000000-0000-0000-0000-000000000010"),
                            Name = "Stealth"
                        });
                });

            modelBuilder.Entity("Imi.Project.Api.Core.Entities.Publisher", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Country")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("Name")
                        .IsUnique()
                        .HasFilter("[Name] IS NOT NULL");

                    b.ToTable("Publishers");

                    b.HasData(
                        new
                        {
                            Id = new Guid("00000000-0000-0000-0000-000000000001"),
                            Country = "America",
                            Name = "Bethesda"
                        },
                        new
                        {
                            Id = new Guid("00000000-0000-0000-0000-000000000002"),
                            Country = "Japan",
                            Name = "Nintendo"
                        },
                        new
                        {
                            Id = new Guid("00000000-0000-0000-0000-000000000003"),
                            Country = "America",
                            Name = "Ubisoft"
                        },
                        new
                        {
                            Id = new Guid("00000000-0000-0000-0000-000000000004"),
                            Country = "Japan",
                            Name = "Square inex"
                        },
                        new
                        {
                            Id = new Guid("00000000-0000-0000-0000-000000000005"),
                            Country = "America",
                            Name = "Sony"
                        },
                        new
                        {
                            Id = new Guid("00000000-0000-0000-0000-000000000006"),
                            Country = "America",
                            Name = "Microsoft"
                        },
                        new
                        {
                            Id = new Guid("00000000-0000-0000-0000-000000000007"),
                            Country = "Japan",
                            Name = "The pokemon company"
                        },
                        new
                        {
                            Id = new Guid("00000000-0000-0000-0000-000000000008"),
                            Country = "Sweden",
                            Name = "CD project"
                        },
                        new
                        {
                            Id = new Guid("00000000-0000-0000-0000-000000000009"),
                            Country = "Japan",
                            Name = "Arc System Works"
                        },
                        new
                        {
                            Id = new Guid("00000000-0000-0000-0000-000000000010"),
                            Country = "America",
                            Name = "Interplay Entertainment"
                        });
                });

            modelBuilder.Entity("Imi.Project.Api.Core.Entities.UserGame", b =>
                {
                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("GameId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("UserId", "GameId");

                    b.HasIndex("GameId");

                    b.ToTable("UsersGames");

                    b.HasData(
                        new
                        {
                            UserId = new Guid("00000000-0000-0000-0000-000000000002"),
                            GameId = new Guid("00000000-0000-0000-0000-000000000001")
                        },
                        new
                        {
                            UserId = new Guid("00000000-0000-0000-0000-000000000002"),
                            GameId = new Guid("00000000-0000-0000-0000-000000000002")
                        },
                        new
                        {
                            UserId = new Guid("00000000-0000-0000-0000-000000000002"),
                            GameId = new Guid("00000000-0000-0000-0000-000000000003")
                        },
                        new
                        {
                            UserId = new Guid("00000000-0000-0000-0000-000000000001"),
                            GameId = new Guid("00000000-0000-0000-0000-000000000003")
                        },
                        new
                        {
                            UserId = new Guid("00000000-0000-0000-0000-000000000004"),
                            GameId = new Guid("00000000-0000-0000-0000-000000000004")
                        },
                        new
                        {
                            UserId = new Guid("00000000-0000-0000-0000-000000000005"),
                            GameId = new Guid("00000000-0000-0000-0000-000000000005")
                        },
                        new
                        {
                            UserId = new Guid("00000000-0000-0000-0000-000000000006"),
                            GameId = new Guid("00000000-0000-0000-0000-000000000006")
                        },
                        new
                        {
                            UserId = new Guid("00000000-0000-0000-0000-000000000007"),
                            GameId = new Guid("00000000-0000-0000-0000-000000000007")
                        },
                        new
                        {
                            UserId = new Guid("00000000-0000-0000-0000-000000000008"),
                            GameId = new Guid("00000000-0000-0000-0000-000000000008")
                        },
                        new
                        {
                            UserId = new Guid("00000000-0000-0000-0000-000000000009"),
                            GameId = new Guid("00000000-0000-0000-0000-000000000009")
                        },
                        new
                        {
                            UserId = new Guid("00000000-0000-0000-0000-000000000009"),
                            GameId = new Guid("00000000-0000-0000-0000-000000000008")
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole<System.Guid>", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles", (string)null);

                    b.HasData(
                        new
                        {
                            Id = new Guid("00000000-0000-0000-0000-000000000001"),
                            ConcurrencyStamp = "a42df2f0-283d-4ea7-89b2-9fb26b26207a",
                            Name = "Admin",
                            NormalizedName = "Admin"
                        },
                        new
                        {
                            Id = new Guid("00000000-0000-0000-0000-000000000002"),
                            ConcurrencyStamp = "d29ce038-5e43-428f-ade2-69822ff3d045",
                            Name = "User",
                            NormalizedName = "User"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<System.Guid>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("RoleId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<System.Guid>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);

                    b.HasData(
                        new
                        {
                            Id = 1,
                            ClaimType = "http://schemas.xmlsoap.org/ws/2005/05/identity/claims/dateofbirth",
                            ClaimValue = "12/01/2023",
                            UserId = new Guid("00000000-0000-0000-0000-000000000001")
                        },
                        new
                        {
                            Id = 2,
                            ClaimType = "approved",
                            ClaimValue = "True",
                            UserId = new Guid("00000000-0000-0000-0000-000000000001")
                        },
                        new
                        {
                            Id = 3,
                            ClaimType = "http://schemas.xmlsoap.org/ws/2005/05/identity/claims/dateofbirth",
                            ClaimValue = "19/08/2000",
                            UserId = new Guid("00000000-0000-0000-0000-000000000002")
                        },
                        new
                        {
                            Id = 4,
                            ClaimType = "approved",
                            ClaimValue = "True",
                            UserId = new Guid("00000000-0000-0000-0000-000000000002")
                        },
                        new
                        {
                            Id = 5,
                            ClaimType = "http://schemas.xmlsoap.org/ws/2005/05/identity/claims/dateofbirth",
                            ClaimValue = "19/08/2010",
                            UserId = new Guid("00000000-0000-0000-0000-000000000003")
                        },
                        new
                        {
                            Id = 6,
                            ClaimType = "approved",
                            ClaimValue = "True",
                            UserId = new Guid("00000000-0000-0000-0000-000000000003")
                        },
                        new
                        {
                            Id = 7,
                            ClaimType = "http://schemas.xmlsoap.org/ws/2005/05/identity/claims/dateofbirth",
                            ClaimValue = "19/08/2010",
                            UserId = new Guid("00000000-0000-0000-0000-000000000004")
                        },
                        new
                        {
                            Id = 8,
                            ClaimType = "approved",
                            ClaimValue = "True",
                            UserId = new Guid("00000000-0000-0000-0000-000000000004")
                        },
                        new
                        {
                            Id = 9,
                            ClaimType = "http://schemas.xmlsoap.org/ws/2005/05/identity/claims/dateofbirth",
                            ClaimValue = "19/08/2010",
                            UserId = new Guid("00000000-0000-0000-0000-000000000005")
                        },
                        new
                        {
                            Id = 10,
                            ClaimType = "approved",
                            ClaimValue = "True",
                            UserId = new Guid("00000000-0000-0000-0000-000000000005")
                        },
                        new
                        {
                            Id = 11,
                            ClaimType = "http://schemas.xmlsoap.org/ws/2005/05/identity/claims/dateofbirth",
                            ClaimValue = "19/08/2010",
                            UserId = new Guid("00000000-0000-0000-0000-000000000006")
                        },
                        new
                        {
                            Id = 12,
                            ClaimType = "approved",
                            ClaimValue = "True",
                            UserId = new Guid("00000000-0000-0000-0000-000000000006")
                        },
                        new
                        {
                            Id = 13,
                            ClaimType = "http://schemas.xmlsoap.org/ws/2005/05/identity/claims/dateofbirth",
                            ClaimValue = "19/08/2010",
                            UserId = new Guid("00000000-0000-0000-0000-000000000007")
                        },
                        new
                        {
                            Id = 14,
                            ClaimType = "approved",
                            ClaimValue = "True",
                            UserId = new Guid("00000000-0000-0000-0000-000000000007")
                        },
                        new
                        {
                            Id = 15,
                            ClaimType = "http://schemas.xmlsoap.org/ws/2005/05/identity/claims/dateofbirth",
                            ClaimValue = "19/08/2010",
                            UserId = new Guid("00000000-0000-0000-0000-000000000008")
                        },
                        new
                        {
                            Id = 16,
                            ClaimType = "approved",
                            ClaimValue = "True",
                            UserId = new Guid("00000000-0000-0000-0000-000000000008")
                        },
                        new
                        {
                            Id = 17,
                            ClaimType = "http://schemas.xmlsoap.org/ws/2005/05/identity/claims/dateofbirth",
                            ClaimValue = "19/08/2010",
                            UserId = new Guid("00000000-0000-0000-0000-000000000009")
                        },
                        new
                        {
                            Id = 18,
                            ClaimType = "approved",
                            ClaimValue = "True",
                            UserId = new Guid("00000000-0000-0000-0000-000000000009")
                        },
                        new
                        {
                            Id = 19,
                            ClaimType = "http://schemas.xmlsoap.org/ws/2005/05/identity/claims/dateofbirth",
                            ClaimValue = "19/08/2010",
                            UserId = new Guid("00000000-0000-0000-0000-000000000010")
                        },
                        new
                        {
                            Id = 20,
                            ClaimType = "approved",
                            ClaimValue = "True",
                            UserId = new Guid("00000000-0000-0000-0000-000000000010")
                        },
                        new
                        {
                            Id = 21,
                            ClaimType = "http://schemas.xmlsoap.org/ws/2005/05/identity/claims/dateofbirth",
                            ClaimValue = "19/08/2010",
                            UserId = new Guid("00000000-0000-0000-0000-000000000011")
                        },
                        new
                        {
                            Id = 22,
                            ClaimType = "approved",
                            ClaimValue = "True",
                            UserId = new Guid("00000000-0000-0000-0000-000000000011")
                        },
                        new
                        {
                            Id = 23,
                            ClaimType = "http://schemas.xmlsoap.org/ws/2005/05/identity/claims/dateofbirth",
                            ClaimValue = "19/08/2010",
                            UserId = new Guid("00000000-0000-0000-0000-000000000012")
                        },
                        new
                        {
                            Id = 24,
                            ClaimType = "approved",
                            ClaimValue = "True",
                            UserId = new Guid("00000000-0000-0000-0000-000000000012")
                        },
                        new
                        {
                            Id = 25,
                            ClaimType = "http://schemas.xmlsoap.org/ws/2005/05/identity/claims/dateofbirth",
                            ClaimValue = "19/08/2010",
                            UserId = new Guid("00000000-0000-0000-0000-000000000013")
                        },
                        new
                        {
                            Id = 26,
                            ClaimType = "approved",
                            ClaimValue = "True",
                            UserId = new Guid("00000000-0000-0000-0000-000000000013")
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<System.Guid>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<System.Guid>", b =>
                {
                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("RoleId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);

                    b.HasData(
                        new
                        {
                            UserId = new Guid("00000000-0000-0000-0000-000000000001"),
                            RoleId = new Guid("00000000-0000-0000-0000-000000000002")
                        },
                        new
                        {
                            UserId = new Guid("00000000-0000-0000-0000-000000000002"),
                            RoleId = new Guid("00000000-0000-0000-0000-000000000001")
                        },
                        new
                        {
                            UserId = new Guid("00000000-0000-0000-0000-000000000003"),
                            RoleId = new Guid("00000000-0000-0000-0000-000000000002")
                        },
                        new
                        {
                            UserId = new Guid("00000000-0000-0000-0000-000000000004"),
                            RoleId = new Guid("00000000-0000-0000-0000-000000000002")
                        },
                        new
                        {
                            UserId = new Guid("00000000-0000-0000-0000-000000000005"),
                            RoleId = new Guid("00000000-0000-0000-0000-000000000001")
                        },
                        new
                        {
                            UserId = new Guid("00000000-0000-0000-0000-000000000006"),
                            RoleId = new Guid("00000000-0000-0000-0000-000000000002")
                        },
                        new
                        {
                            UserId = new Guid("00000000-0000-0000-0000-000000000007"),
                            RoleId = new Guid("00000000-0000-0000-0000-000000000002")
                        },
                        new
                        {
                            UserId = new Guid("00000000-0000-0000-0000-000000000008"),
                            RoleId = new Guid("00000000-0000-0000-0000-000000000002")
                        },
                        new
                        {
                            UserId = new Guid("00000000-0000-0000-0000-000000000009"),
                            RoleId = new Guid("00000000-0000-0000-0000-000000000002")
                        },
                        new
                        {
                            UserId = new Guid("00000000-0000-0000-0000-000000000010"),
                            RoleId = new Guid("00000000-0000-0000-0000-000000000002")
                        },
                        new
                        {
                            UserId = new Guid("00000000-0000-0000-0000-000000000011"),
                            RoleId = new Guid("00000000-0000-0000-0000-000000000001")
                        },
                        new
                        {
                            UserId = new Guid("00000000-0000-0000-0000-000000000012"),
                            RoleId = new Guid("00000000-0000-0000-0000-000000000002")
                        },
                        new
                        {
                            UserId = new Guid("00000000-0000-0000-0000-000000000013"),
                            RoleId = new Guid("00000000-0000-0000-0000-000000000002")
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<System.Guid>", b =>
                {
                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("Imi.Project.Api.Core.Entities.Game", b =>
                {
                    b.HasOne("Imi.Project.Api.Core.Entities.Publisher", "Publisher")
                        .WithMany("Games")
                        .HasForeignKey("PublisherId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Publisher");
                });

            modelBuilder.Entity("Imi.Project.Api.Core.Entities.GameGenre", b =>
                {
                    b.HasOne("Imi.Project.Api.Core.Entities.Game", "Game")
                        .WithMany()
                        .HasForeignKey("GameId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Imi.Project.Api.Core.Entities.Genre", "Genre")
                        .WithMany()
                        .HasForeignKey("GenreId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Game");

                    b.Navigation("Genre");
                });

            modelBuilder.Entity("Imi.Project.Api.Core.Entities.UserGame", b =>
                {
                    b.HasOne("Imi.Project.Api.Core.Entities.Game", "Game")
                        .WithMany()
                        .HasForeignKey("GameId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Imi.Project.Api.Core.Entities.ApplicationUser", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Game");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<System.Guid>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole<System.Guid>", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<System.Guid>", b =>
                {
                    b.HasOne("Imi.Project.Api.Core.Entities.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<System.Guid>", b =>
                {
                    b.HasOne("Imi.Project.Api.Core.Entities.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<System.Guid>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole<System.Guid>", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Imi.Project.Api.Core.Entities.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<System.Guid>", b =>
                {
                    b.HasOne("Imi.Project.Api.Core.Entities.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Imi.Project.Api.Core.Entities.Publisher", b =>
                {
                    b.Navigation("Games");
                });
#pragma warning restore 612, 618
        }
    }
}
