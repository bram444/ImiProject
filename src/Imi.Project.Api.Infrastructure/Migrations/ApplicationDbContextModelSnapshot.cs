// <auto-generated />
using System;
using Imi.Project.Api.Infrastructure;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace Imi.Project.Api.Infrastructure.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    partial class ApplicationDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "6.0.10")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder, 1L, 1);

            modelBuilder.Entity("Imi.Project.Api.Core.Entities.ApplicationUser", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<bool>("ApprovedTerms")
                        .HasColumnType("bit");

                    b.Property<DateTime>("BirthDay")
                        .HasColumnType("datetime2");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers", (string)null);

                    b.HasData(
                        new
                        {
                            Id = new Guid("00000000-0000-0000-0000-000000000001"),
                            AccessFailedCount = 0,
                            ApprovedTerms = true,
                            BirthDay = new DateTime(2022, 12, 23, 12, 33, 29, 309, DateTimeKind.Local).AddTicks(7716),
                            ConcurrencyStamp = "c8554266-b401-4519-9aeb-a9283053fc58",
                            Email = "FirstUser@gmail.com",
                            EmailConfirmed = true,
                            FirstName = "First",
                            LastName = "User",
                            LockoutEnabled = false,
                            NormalizedEmail = "FIRSTUSER@GMAIL.COM",
                            NormalizedUserName = "FIRSTGUY",
                            PasswordHash = "AQAAAAIAAYagAAAAEN9xEedrdJgV3ElBmhrHAe5qLECTlGKQod1hFXo9etb5Qa/fgyhwfUPn8e2cfweiNw==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "VVPCRDAS3MJWQD5CSW2GWPRADBXEZINA",
                            TwoFactorEnabled = false,
                            UserName = "FirstGuy"
                        },
                        new
                        {
                            Id = new Guid("00000000-0000-0000-0000-000000000002"),
                            AccessFailedCount = 0,
                            ApprovedTerms = true,
                            BirthDay = new DateTime(2010, 8, 19, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            ConcurrencyStamp = "c8554266-b401-4519-9aeb-a9283053fc59",
                            Email = "SecondUser@gmail.com",
                            EmailConfirmed = true,
                            FirstName = "Second",
                            LastName = "User",
                            LockoutEnabled = false,
                            NormalizedEmail = "SECONDUSER@GMAIL.COM",
                            NormalizedUserName = "TIMTHEDESTROYERXX400",
                            PasswordHash = "AQAAAAIAAYagAAAAEFyIylZNsRS2XWlnfZYhICG8gkh6saCuOTvQdi2KAWQrqzgG4hFIrrmkZ08AfGfuDw==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "VVPCRDAS3MJWQD5CSW2GWPRADBXEZINB",
                            TwoFactorEnabled = false,
                            UserName = "TimTheDestroyerXx400"
                        },
                        new
                        {
                            Id = new Guid("00000000-0000-0000-0000-000000000003"),
                            AccessFailedCount = 0,
                            ApprovedTerms = true,
                            BirthDay = new DateTime(2010, 8, 19, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            ConcurrencyStamp = "c8554266-b401-4519-9aeb-a9283053fc50",
                            Email = "ThirdUser@gmail.com",
                            EmailConfirmed = true,
                            FirstName = "Third",
                            LastName = "User",
                            LockoutEnabled = false,
                            NormalizedEmail = "THIRDUSER@GMAIL.COM",
                            NormalizedUserName = "USERTHETHIRD",
                            PasswordHash = "AQAAAAIAAYagAAAAEKS+wlcVW0P7ztz6R11UFs+DgOSBQCp1mp8RZiiCpJWWEjttM7Z6WETFASLTbOm20g==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "VVPCRDAS3MJWQD5CSW2GWPRADBXEZINC",
                            TwoFactorEnabled = false,
                            UserName = "UserTheThird"
                        },
                        new
                        {
                            Id = new Guid("00000000-0000-0000-0000-000000000004"),
                            AccessFailedCount = 0,
                            ApprovedTerms = true,
                            BirthDay = new DateTime(2010, 8, 19, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            ConcurrencyStamp = "c8554266-b401-4519-9aeb-a9283053fc51",
                            Email = "FourthUser@gmail.com",
                            EmailConfirmed = true,
                            FirstName = "Fourth",
                            LastName = "User",
                            LockoutEnabled = false,
                            NormalizedEmail = "FOURTHUSER@GMAIL.COM",
                            NormalizedUserName = "USERTHEFOURTH",
                            PasswordHash = "AQAAAAIAAYagAAAAEHgL1qfOaNGTmMGFVgM/kCHFKdWrHHzG0i5/EtWwv9r/FtgkydO8WtgcWDCBxV0QzA==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "VVPCRDAS3MJWQD5CSW2GWPRADBXEZIND",
                            TwoFactorEnabled = false,
                            UserName = "UserTheFourth"
                        },
                        new
                        {
                            Id = new Guid("00000000-0000-0000-0000-000000000005"),
                            AccessFailedCount = 0,
                            ApprovedTerms = true,
                            BirthDay = new DateTime(2010, 8, 19, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            ConcurrencyStamp = "c8554266-b401-4519-9aeb-a9283053fc52",
                            Email = "FifthUser@gmail.com",
                            EmailConfirmed = true,
                            FirstName = "Fifth",
                            LastName = "User",
                            LockoutEnabled = false,
                            NormalizedEmail = "FIFTHUSER@GMAIL.COM",
                            NormalizedUserName = "USERTHEFIFTH",
                            PasswordHash = "AQAAAAIAAYagAAAAEMOliz4lCaioM6s8pctj4jbL/jWNQkH1KrvPEtUvBFpIp9lpDOEKLMPcAKnyESypww==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "VVPCRDAS3MJWQD5CSW2GWPRADBXEZINE",
                            TwoFactorEnabled = false,
                            UserName = "UserTheFifth"
                        },
                        new
                        {
                            Id = new Guid("00000000-0000-0000-0000-000000000006"),
                            AccessFailedCount = 0,
                            ApprovedTerms = true,
                            BirthDay = new DateTime(2010, 8, 19, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            ConcurrencyStamp = "c8554266-b401-4519-9aeb-a9283053fc53",
                            Email = "SixUser@gmail.com",
                            EmailConfirmed = true,
                            FirstName = "Six",
                            LastName = "User",
                            LockoutEnabled = false,
                            NormalizedEmail = "SIXUSER@GMAIL.COM",
                            NormalizedUserName = "USERTHESITH",
                            PasswordHash = "AQAAAAIAAYagAAAAEHT5vb1Q/5hXndWzpHsG3CSjprruFazIhW1Y0TZ8KLDW8udDa7k0PAML9nnMOPDHkw==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "VVPCRDAS3MJWQD5CSW2GWPRADBXEZINF",
                            TwoFactorEnabled = false,
                            UserName = "UserTheSith"
                        },
                        new
                        {
                            Id = new Guid("00000000-0000-0000-0000-000000000007"),
                            AccessFailedCount = 0,
                            ApprovedTerms = true,
                            BirthDay = new DateTime(2010, 8, 19, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            ConcurrencyStamp = "c8554266-b401-4519-9aeb-a9283053fc54",
                            Email = "SevenUser@gmail.com",
                            EmailConfirmed = true,
                            FirstName = "Seven",
                            LastName = "User",
                            LockoutEnabled = false,
                            NormalizedEmail = "SEVENUSER@GMAIL.COM",
                            NormalizedUserName = "USERTHESEVEN",
                            PasswordHash = "AQAAAAIAAYagAAAAEMkqcj3LmfzDySlIBKg+zreR81uzPPYHuldeo7N4izh+or8j8twpck0jY1Baj4CkEQ==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "VVPCRDAS3MJWQD5CSW2GWPRADBXEZING",
                            TwoFactorEnabled = false,
                            UserName = "UserTheSeven"
                        },
                        new
                        {
                            Id = new Guid("00000000-0000-0000-0000-000000000008"),
                            AccessFailedCount = 0,
                            ApprovedTerms = true,
                            BirthDay = new DateTime(2010, 8, 19, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            ConcurrencyStamp = "c8554266-b401-4519-9aeb-a9283053fc55",
                            Email = "EigthUser@gmail.com",
                            EmailConfirmed = true,
                            FirstName = "Eigth",
                            LastName = "User",
                            LockoutEnabled = false,
                            NormalizedEmail = "EIGTHUSER@GMAIL.COM",
                            NormalizedUserName = "USERTHEEIGTH",
                            PasswordHash = "AQAAAAIAAYagAAAAEFCoxdhA1+TlhWAp0M9Owp7gkk9T8QAKkUPMJ+fQjZGQCiBOfhXo7TTc3WwFkWWzpA==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "VVPCRDAS3MJWQD5CSW2GWPRADBXEZINH",
                            TwoFactorEnabled = false,
                            UserName = "UserTheEigth"
                        },
                        new
                        {
                            Id = new Guid("00000000-0000-0000-0000-000000000009"),
                            AccessFailedCount = 0,
                            ApprovedTerms = true,
                            BirthDay = new DateTime(2010, 8, 19, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            ConcurrencyStamp = "c8554266-b401-4519-9aeb-a9283053fc56",
                            Email = "NinthUser@gmail.com",
                            EmailConfirmed = true,
                            FirstName = "Ninth",
                            LastName = "User",
                            LockoutEnabled = false,
                            NormalizedEmail = "NINTHUSER@GMAIL.COM",
                            NormalizedUserName = "USERTHENINTH",
                            PasswordHash = "AQAAAAIAAYagAAAAEKebHUpzHuvoFcvHgmR87kGzpQoRXVIp5cLdSBsbNizFXdMYeZ0ztawoycPY/AG9bw==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "VVPCRDAS3MJWQD5CSW2GWPRADBXEZINI",
                            TwoFactorEnabled = false,
                            UserName = "UserTheNinth"
                        },
                        new
                        {
                            Id = new Guid("00000000-0000-0000-0000-000000000010"),
                            AccessFailedCount = 0,
                            ApprovedTerms = true,
                            BirthDay = new DateTime(2010, 8, 19, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            ConcurrencyStamp = "c8554266-b401-4519-9aeb-a9283053fc57",
                            Email = "XUser@gmail.com",
                            EmailConfirmed = true,
                            FirstName = "X",
                            LastName = "User",
                            LockoutEnabled = false,
                            NormalizedEmail = "XUSER@GMAIL.COM",
                            NormalizedUserName = "USERX",
                            PasswordHash = "AQAAAAIAAYagAAAAEHhcuJhRpOcrNHKqA/JYBU3JLB+QPBLAgEeRGSvRNpHYE3/MuycRUrm5aMDouqSjwg==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "VVPCRDAS3MJWQD5CSW2GWPRADBXEZINJ",
                            TwoFactorEnabled = false,
                            UserName = "UserX"
                        });
                });

            modelBuilder.Entity("Imi.Project.Api.Core.Entities.Game", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("LastEditedOn")
                        .HasColumnType("datetime2");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<float>("Price")
                        .HasColumnType("real");

                    b.Property<Guid>("PublisherId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("PublisherId");

                    b.ToTable("Games");

                    b.HasData(
                        new
                        {
                            Id = new Guid("00000000-0000-0000-0000-000000000001"),
                            CreatedOn = new DateTime(2022, 12, 23, 12, 33, 29, 309, DateTimeKind.Local).AddTicks(7259),
                            LastEditedOn = new DateTime(2022, 12, 23, 12, 33, 29, 309, DateTimeKind.Local).AddTicks(7299),
                            Name = "Fallout New Vegas",
                            Price = 14.99f,
                            PublisherId = new Guid("00000000-0000-0000-0000-000000000001")
                        },
                        new
                        {
                            Id = new Guid("00000000-0000-0000-0000-000000000002"),
                            CreatedOn = new DateTime(2022, 12, 23, 12, 33, 29, 309, DateTimeKind.Local).AddTicks(7305),
                            LastEditedOn = new DateTime(2022, 12, 23, 12, 33, 29, 309, DateTimeKind.Local).AddTicks(7306),
                            Name = "Splatoon 3",
                            Price = 59.99f,
                            PublisherId = new Guid("00000000-0000-0000-0000-000000000002")
                        },
                        new
                        {
                            Id = new Guid("00000000-0000-0000-0000-000000000003"),
                            CreatedOn = new DateTime(2022, 12, 23, 12, 33, 29, 309, DateTimeKind.Local).AddTicks(7310),
                            LastEditedOn = new DateTime(2022, 12, 23, 12, 33, 29, 309, DateTimeKind.Local).AddTicks(7312),
                            Name = "Animal Crossing",
                            Price = 59.99f,
                            PublisherId = new Guid("00000000-0000-0000-0000-000000000002")
                        },
                        new
                        {
                            Id = new Guid("00000000-0000-0000-0000-000000000004"),
                            CreatedOn = new DateTime(2022, 12, 23, 12, 33, 29, 309, DateTimeKind.Local).AddTicks(7319),
                            LastEditedOn = new DateTime(2022, 12, 23, 12, 33, 29, 309, DateTimeKind.Local).AddTicks(7321),
                            Name = "Fallout 3",
                            Price = 14.99f,
                            PublisherId = new Guid("00000000-0000-0000-0000-000000000001")
                        },
                        new
                        {
                            Id = new Guid("00000000-0000-0000-0000-000000000005"),
                            CreatedOn = new DateTime(2022, 12, 23, 12, 33, 29, 309, DateTimeKind.Local).AddTicks(7339),
                            LastEditedOn = new DateTime(2022, 12, 23, 12, 33, 29, 309, DateTimeKind.Local).AddTicks(7341),
                            Name = "Fallout 4",
                            Price = 14.99f,
                            PublisherId = new Guid("00000000-0000-0000-0000-000000000001")
                        },
                        new
                        {
                            Id = new Guid("00000000-0000-0000-0000-000000000006"),
                            CreatedOn = new DateTime(2022, 12, 23, 12, 33, 29, 309, DateTimeKind.Local).AddTicks(7350),
                            LastEditedOn = new DateTime(2022, 12, 23, 12, 33, 29, 309, DateTimeKind.Local).AddTicks(7351),
                            Name = "Splatoon 2",
                            Price = 59.99f,
                            PublisherId = new Guid("00000000-0000-0000-0000-000000000002")
                        },
                        new
                        {
                            Id = new Guid("00000000-0000-0000-0000-000000000007"),
                            CreatedOn = new DateTime(2022, 12, 23, 12, 33, 29, 309, DateTimeKind.Local).AddTicks(7354),
                            LastEditedOn = new DateTime(2022, 12, 23, 12, 33, 29, 309, DateTimeKind.Local).AddTicks(7356),
                            Name = "Splatoon",
                            Price = 59.99f,
                            PublisherId = new Guid("00000000-0000-0000-0000-000000000002")
                        },
                        new
                        {
                            Id = new Guid("00000000-0000-0000-0000-000000000008"),
                            CreatedOn = new DateTime(2022, 12, 23, 12, 33, 29, 309, DateTimeKind.Local).AddTicks(7359),
                            LastEditedOn = new DateTime(2022, 12, 23, 12, 33, 29, 309, DateTimeKind.Local).AddTicks(7385),
                            Name = "Rabbits",
                            Price = 59.99f,
                            PublisherId = new Guid("00000000-0000-0000-0000-000000000003")
                        },
                        new
                        {
                            Id = new Guid("00000000-0000-0000-0000-000000000009"),
                            CreatedOn = new DateTime(2022, 12, 23, 12, 33, 29, 309, DateTimeKind.Local).AddTicks(7389),
                            LastEditedOn = new DateTime(2022, 12, 23, 12, 33, 29, 309, DateTimeKind.Local).AddTicks(7391),
                            Name = "Rayman",
                            Price = 59.99f,
                            PublisherId = new Guid("00000000-0000-0000-0000-000000000003")
                        },
                        new
                        {
                            Id = new Guid("00000000-0000-0000-0000-000000000010"),
                            CreatedOn = new DateTime(2022, 12, 23, 12, 33, 29, 309, DateTimeKind.Local).AddTicks(7393),
                            LastEditedOn = new DateTime(2022, 12, 23, 12, 33, 29, 309, DateTimeKind.Local).AddTicks(7395),
                            Name = "Assassins creed",
                            Price = 59.99f,
                            PublisherId = new Guid("00000000-0000-0000-0000-000000000003")
                        });
                });

            modelBuilder.Entity("Imi.Project.Api.Core.Entities.GameGenre", b =>
                {
                    b.Property<Guid>("GenreId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("GameId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("GenreId", "GameId");

                    b.HasIndex("GameId");

                    b.ToTable("GamesGenre");

                    b.HasData(
                        new
                        {
                            GenreId = new Guid("00000000-0000-0000-0000-000000000001"),
                            GameId = new Guid("00000000-0000-0000-0000-000000000001")
                        },
                        new
                        {
                            GenreId = new Guid("00000000-0000-0000-0000-000000000002"),
                            GameId = new Guid("00000000-0000-0000-0000-000000000001")
                        },
                        new
                        {
                            GenreId = new Guid("00000000-0000-0000-0000-000000000002"),
                            GameId = new Guid("00000000-0000-0000-0000-000000000002")
                        },
                        new
                        {
                            GenreId = new Guid("00000000-0000-0000-0000-000000000003"),
                            GameId = new Guid("00000000-0000-0000-0000-000000000003")
                        },
                        new
                        {
                            GenreId = new Guid("00000000-0000-0000-0000-000000000007"),
                            GameId = new Guid("00000000-0000-0000-0000-000000000004")
                        },
                        new
                        {
                            GenreId = new Guid("00000000-0000-0000-0000-000000000008"),
                            GameId = new Guid("00000000-0000-0000-0000-000000000004")
                        },
                        new
                        {
                            GenreId = new Guid("00000000-0000-0000-0000-000000000009"),
                            GameId = new Guid("00000000-0000-0000-0000-000000000010")
                        },
                        new
                        {
                            GenreId = new Guid("00000000-0000-0000-0000-000000000010"),
                            GameId = new Guid("00000000-0000-0000-0000-000000000010")
                        },
                        new
                        {
                            GenreId = new Guid("00000000-0000-0000-0000-000000000002"),
                            GameId = new Guid("00000000-0000-0000-0000-000000000006")
                        },
                        new
                        {
                            GenreId = new Guid("00000000-0000-0000-0000-000000000002"),
                            GameId = new Guid("00000000-0000-0000-0000-000000000007")
                        });
                });

            modelBuilder.Entity("Imi.Project.Api.Core.Entities.Genre", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("LastEditedOn")
                        .HasColumnType("datetime2");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Genres");

                    b.HasData(
                        new
                        {
                            Id = new Guid("00000000-0000-0000-0000-000000000001"),
                            CreatedOn = new DateTime(2022, 12, 23, 12, 33, 29, 309, DateTimeKind.Local).AddTicks(7427),
                            Description = "Fist person shooter",
                            LastEditedOn = new DateTime(2022, 12, 23, 12, 33, 29, 309, DateTimeKind.Local).AddTicks(7424),
                            Name = "FPS"
                        },
                        new
                        {
                            Id = new Guid("00000000-0000-0000-0000-000000000002"),
                            CreatedOn = new DateTime(2022, 12, 23, 12, 33, 29, 309, DateTimeKind.Local).AddTicks(7431),
                            Description = "Fist person shooter but in the third person",
                            LastEditedOn = new DateTime(2022, 12, 23, 12, 33, 29, 309, DateTimeKind.Local).AddTicks(7429),
                            Name = "Third person shooter"
                        },
                        new
                        {
                            Id = new Guid("00000000-0000-0000-0000-000000000003"),
                            CreatedOn = new DateTime(2022, 12, 23, 12, 33, 29, 309, DateTimeKind.Local).AddTicks(7435),
                            LastEditedOn = new DateTime(2022, 12, 23, 12, 33, 29, 309, DateTimeKind.Local).AddTicks(7433),
                            Name = "Simulation"
                        },
                        new
                        {
                            Id = new Guid("00000000-0000-0000-0000-000000000004"),
                            CreatedOn = new DateTime(2022, 12, 23, 12, 33, 29, 309, DateTimeKind.Local).AddTicks(7442),
                            LastEditedOn = new DateTime(2022, 12, 23, 12, 33, 29, 309, DateTimeKind.Local).AddTicks(7441),
                            Name = "Platformer"
                        },
                        new
                        {
                            Id = new Guid("00000000-0000-0000-0000-000000000005"),
                            CreatedOn = new DateTime(2022, 12, 23, 12, 33, 29, 309, DateTimeKind.Local).AddTicks(7448),
                            LastEditedOn = new DateTime(2022, 12, 23, 12, 33, 29, 309, DateTimeKind.Local).AddTicks(7445),
                            Name = "Party game"
                        },
                        new
                        {
                            Id = new Guid("00000000-0000-0000-0000-000000000006"),
                            CreatedOn = new DateTime(2022, 12, 23, 12, 33, 29, 309, DateTimeKind.Local).AddTicks(7485),
                            LastEditedOn = new DateTime(2022, 12, 23, 12, 33, 29, 309, DateTimeKind.Local).AddTicks(7483),
                            Name = "Story driven"
                        },
                        new
                        {
                            Id = new Guid("00000000-0000-0000-0000-000000000007"),
                            CreatedOn = new DateTime(2022, 12, 23, 12, 33, 29, 309, DateTimeKind.Local).AddTicks(7489),
                            LastEditedOn = new DateTime(2022, 12, 23, 12, 33, 29, 309, DateTimeKind.Local).AddTicks(7487),
                            Name = "Open Word"
                        },
                        new
                        {
                            Id = new Guid("00000000-0000-0000-0000-000000000008"),
                            CreatedOn = new DateTime(2022, 12, 23, 12, 33, 29, 309, DateTimeKind.Local).AddTicks(7493),
                            LastEditedOn = new DateTime(2022, 12, 23, 12, 33, 29, 309, DateTimeKind.Local).AddTicks(7491),
                            Name = "Nonlinear gameplay"
                        },
                        new
                        {
                            Id = new Guid("00000000-0000-0000-0000-000000000009"),
                            CreatedOn = new DateTime(2022, 12, 23, 12, 33, 29, 309, DateTimeKind.Local).AddTicks(7497),
                            LastEditedOn = new DateTime(2022, 12, 23, 12, 33, 29, 309, DateTimeKind.Local).AddTicks(7495),
                            Name = "Action-adventure"
                        },
                        new
                        {
                            Id = new Guid("00000000-0000-0000-0000-000000000010"),
                            CreatedOn = new DateTime(2022, 12, 23, 12, 33, 29, 309, DateTimeKind.Local).AddTicks(7501),
                            LastEditedOn = new DateTime(2022, 12, 23, 12, 33, 29, 309, DateTimeKind.Local).AddTicks(7499),
                            Name = "Stealth"
                        });
                });

            modelBuilder.Entity("Imi.Project.Api.Core.Entities.Publisher", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Country")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("LastEditedOn")
                        .HasColumnType("datetime2");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Publishers");

                    b.HasData(
                        new
                        {
                            Id = new Guid("00000000-0000-0000-0000-000000000001"),
                            Country = "America",
                            CreatedOn = new DateTime(2022, 12, 23, 12, 33, 29, 309, DateTimeKind.Local).AddTicks(7524),
                            LastEditedOn = new DateTime(2022, 12, 23, 12, 33, 29, 309, DateTimeKind.Local).AddTicks(7526),
                            Name = "Bethesda"
                        },
                        new
                        {
                            Id = new Guid("00000000-0000-0000-0000-000000000002"),
                            Country = "Japan",
                            CreatedOn = new DateTime(2022, 12, 23, 12, 33, 29, 309, DateTimeKind.Local).AddTicks(7529),
                            LastEditedOn = new DateTime(2022, 12, 23, 12, 33, 29, 309, DateTimeKind.Local).AddTicks(7531),
                            Name = "Nintendo"
                        },
                        new
                        {
                            Id = new Guid("00000000-0000-0000-0000-000000000003"),
                            Country = "America",
                            CreatedOn = new DateTime(2022, 12, 23, 12, 33, 29, 309, DateTimeKind.Local).AddTicks(7533),
                            LastEditedOn = new DateTime(2022, 12, 23, 12, 33, 29, 309, DateTimeKind.Local).AddTicks(7535),
                            Name = "Ubisoft"
                        },
                        new
                        {
                            Id = new Guid("00000000-0000-0000-0000-000000000004"),
                            Country = "Japan",
                            CreatedOn = new DateTime(2022, 12, 23, 12, 33, 29, 309, DateTimeKind.Local).AddTicks(7537),
                            LastEditedOn = new DateTime(2022, 12, 23, 12, 33, 29, 309, DateTimeKind.Local).AddTicks(7538),
                            Name = "Square inex"
                        },
                        new
                        {
                            Id = new Guid("00000000-0000-0000-0000-000000000005"),
                            Country = "America",
                            CreatedOn = new DateTime(2022, 12, 23, 12, 33, 29, 309, DateTimeKind.Local).AddTicks(7581),
                            LastEditedOn = new DateTime(2022, 12, 23, 12, 33, 29, 309, DateTimeKind.Local).AddTicks(7583),
                            Name = "Sony"
                        },
                        new
                        {
                            Id = new Guid("00000000-0000-0000-0000-000000000006"),
                            Country = "America",
                            CreatedOn = new DateTime(2022, 12, 23, 12, 33, 29, 309, DateTimeKind.Local).AddTicks(7586),
                            LastEditedOn = new DateTime(2022, 12, 23, 12, 33, 29, 309, DateTimeKind.Local).AddTicks(7587),
                            Name = "Microsoft"
                        },
                        new
                        {
                            Id = new Guid("00000000-0000-0000-0000-000000000007"),
                            Country = "Japan",
                            CreatedOn = new DateTime(2022, 12, 23, 12, 33, 29, 309, DateTimeKind.Local).AddTicks(7590),
                            LastEditedOn = new DateTime(2022, 12, 23, 12, 33, 29, 309, DateTimeKind.Local).AddTicks(7591),
                            Name = "The pokemon company"
                        },
                        new
                        {
                            Id = new Guid("00000000-0000-0000-0000-000000000008"),
                            Country = "Sweden",
                            CreatedOn = new DateTime(2022, 12, 23, 12, 33, 29, 309, DateTimeKind.Local).AddTicks(7594),
                            LastEditedOn = new DateTime(2022, 12, 23, 12, 33, 29, 309, DateTimeKind.Local).AddTicks(7595),
                            Name = "CD project"
                        },
                        new
                        {
                            Id = new Guid("00000000-0000-0000-0000-000000000009"),
                            Country = "Japan",
                            CreatedOn = new DateTime(2022, 12, 23, 12, 33, 29, 309, DateTimeKind.Local).AddTicks(7597),
                            LastEditedOn = new DateTime(2022, 12, 23, 12, 33, 29, 309, DateTimeKind.Local).AddTicks(7599),
                            Name = "Arc System Works"
                        },
                        new
                        {
                            Id = new Guid("00000000-0000-0000-0000-000000000010"),
                            Country = "America",
                            CreatedOn = new DateTime(2022, 12, 23, 12, 33, 29, 309, DateTimeKind.Local).AddTicks(7601),
                            LastEditedOn = new DateTime(2022, 12, 23, 12, 33, 29, 309, DateTimeKind.Local).AddTicks(7603),
                            Name = "Interplay Entertainment"
                        });
                });

            modelBuilder.Entity("Imi.Project.Api.Core.Entities.UserGame", b =>
                {
                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("GameId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("UserId", "GameId");

                    b.HasIndex("GameId");

                    b.ToTable("UsersGames");

                    b.HasData(
                        new
                        {
                            UserId = new Guid("00000000-0000-0000-0000-000000000002"),
                            GameId = new Guid("00000000-0000-0000-0000-000000000001")
                        },
                        new
                        {
                            UserId = new Guid("00000000-0000-0000-0000-000000000002"),
                            GameId = new Guid("00000000-0000-0000-0000-000000000002")
                        },
                        new
                        {
                            UserId = new Guid("00000000-0000-0000-0000-000000000002"),
                            GameId = new Guid("00000000-0000-0000-0000-000000000003")
                        },
                        new
                        {
                            UserId = new Guid("00000000-0000-0000-0000-000000000001"),
                            GameId = new Guid("00000000-0000-0000-0000-000000000003")
                        },
                        new
                        {
                            UserId = new Guid("00000000-0000-0000-0000-000000000004"),
                            GameId = new Guid("00000000-0000-0000-0000-000000000004")
                        },
                        new
                        {
                            UserId = new Guid("00000000-0000-0000-0000-000000000005"),
                            GameId = new Guid("00000000-0000-0000-0000-000000000005")
                        },
                        new
                        {
                            UserId = new Guid("00000000-0000-0000-0000-000000000006"),
                            GameId = new Guid("00000000-0000-0000-0000-000000000006")
                        },
                        new
                        {
                            UserId = new Guid("00000000-0000-0000-0000-000000000007"),
                            GameId = new Guid("00000000-0000-0000-0000-000000000007")
                        },
                        new
                        {
                            UserId = new Guid("00000000-0000-0000-0000-000000000008"),
                            GameId = new Guid("00000000-0000-0000-0000-000000000008")
                        },
                        new
                        {
                            UserId = new Guid("00000000-0000-0000-0000-000000000009"),
                            GameId = new Guid("00000000-0000-0000-0000-000000000009")
                        },
                        new
                        {
                            UserId = new Guid("00000000-0000-0000-0000-000000000009"),
                            GameId = new Guid("00000000-0000-0000-0000-000000000008")
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole<System.Guid>", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles", (string)null);

                    b.HasData(
                        new
                        {
                            Id = new Guid("00000000-0000-0000-0000-000000000001"),
                            Name = "Admin",
                            NormalizedName = "ADMIN"
                        },
                        new
                        {
                            Id = new Guid("00000000-0000-0000-0000-000000000002"),
                            Name = "User",
                            NormalizedName = "USER"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<System.Guid>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("RoleId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<System.Guid>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);

                    b.HasData(
                        new
                        {
                            Id = 1,
                            ClaimType = "birthday",
                            ClaimValue = "23/12/2022 12:33:29",
                            UserId = new Guid("00000000-0000-0000-0000-000000000001")
                        },
                        new
                        {
                            Id = 2,
                            ClaimType = "approved",
                            ClaimValue = "True",
                            UserId = new Guid("00000000-0000-0000-0000-000000000001")
                        },
                        new
                        {
                            Id = 3,
                            ClaimType = "birthday",
                            ClaimValue = "19/08/2010 0:00:00",
                            UserId = new Guid("00000000-0000-0000-0000-000000000002")
                        },
                        new
                        {
                            Id = 4,
                            ClaimType = "approved",
                            ClaimValue = "True",
                            UserId = new Guid("00000000-0000-0000-0000-000000000002")
                        },
                        new
                        {
                            Id = 5,
                            ClaimType = "birthday",
                            ClaimValue = "19/08/2010 0:00:00",
                            UserId = new Guid("00000000-0000-0000-0000-000000000003")
                        },
                        new
                        {
                            Id = 6,
                            ClaimType = "approved",
                            ClaimValue = "True",
                            UserId = new Guid("00000000-0000-0000-0000-000000000003")
                        },
                        new
                        {
                            Id = 7,
                            ClaimType = "birthday",
                            ClaimValue = "19/08/2010 0:00:00",
                            UserId = new Guid("00000000-0000-0000-0000-000000000004")
                        },
                        new
                        {
                            Id = 8,
                            ClaimType = "approved",
                            ClaimValue = "True",
                            UserId = new Guid("00000000-0000-0000-0000-000000000004")
                        },
                        new
                        {
                            Id = 9,
                            ClaimType = "birthday",
                            ClaimValue = "19/08/2010 0:00:00",
                            UserId = new Guid("00000000-0000-0000-0000-000000000005")
                        },
                        new
                        {
                            Id = 10,
                            ClaimType = "approved",
                            ClaimValue = "True",
                            UserId = new Guid("00000000-0000-0000-0000-000000000005")
                        },
                        new
                        {
                            Id = 11,
                            ClaimType = "birthday",
                            ClaimValue = "19/08/2010 0:00:00",
                            UserId = new Guid("00000000-0000-0000-0000-000000000006")
                        },
                        new
                        {
                            Id = 12,
                            ClaimType = "approved",
                            ClaimValue = "True",
                            UserId = new Guid("00000000-0000-0000-0000-000000000006")
                        },
                        new
                        {
                            Id = 13,
                            ClaimType = "birthday",
                            ClaimValue = "19/08/2010 0:00:00",
                            UserId = new Guid("00000000-0000-0000-0000-000000000007")
                        },
                        new
                        {
                            Id = 14,
                            ClaimType = "approved",
                            ClaimValue = "True",
                            UserId = new Guid("00000000-0000-0000-0000-000000000007")
                        },
                        new
                        {
                            Id = 15,
                            ClaimType = "birthday",
                            ClaimValue = "19/08/2010 0:00:00",
                            UserId = new Guid("00000000-0000-0000-0000-000000000008")
                        },
                        new
                        {
                            Id = 16,
                            ClaimType = "approved",
                            ClaimValue = "True",
                            UserId = new Guid("00000000-0000-0000-0000-000000000008")
                        },
                        new
                        {
                            Id = 17,
                            ClaimType = "birthday",
                            ClaimValue = "19/08/2010 0:00:00",
                            UserId = new Guid("00000000-0000-0000-0000-000000000009")
                        },
                        new
                        {
                            Id = 18,
                            ClaimType = "approved",
                            ClaimValue = "True",
                            UserId = new Guid("00000000-0000-0000-0000-000000000009")
                        },
                        new
                        {
                            Id = 19,
                            ClaimType = "birthday",
                            ClaimValue = "19/08/2010 0:00:00",
                            UserId = new Guid("00000000-0000-0000-0000-000000000010")
                        },
                        new
                        {
                            Id = 20,
                            ClaimType = "approved",
                            ClaimValue = "True",
                            UserId = new Guid("00000000-0000-0000-0000-000000000010")
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<System.Guid>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<System.Guid>", b =>
                {
                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("RoleId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);

                    b.HasData(
                        new
                        {
                            UserId = new Guid("00000000-0000-0000-0000-000000000001"),
                            RoleId = new Guid("00000000-0000-0000-0000-000000000002")
                        },
                        new
                        {
                            UserId = new Guid("00000000-0000-0000-0000-000000000002"),
                            RoleId = new Guid("00000000-0000-0000-0000-000000000001")
                        },
                        new
                        {
                            UserId = new Guid("00000000-0000-0000-0000-000000000003"),
                            RoleId = new Guid("00000000-0000-0000-0000-000000000002")
                        },
                        new
                        {
                            UserId = new Guid("00000000-0000-0000-0000-000000000004"),
                            RoleId = new Guid("00000000-0000-0000-0000-000000000002")
                        },
                        new
                        {
                            UserId = new Guid("00000000-0000-0000-0000-000000000005"),
                            RoleId = new Guid("00000000-0000-0000-0000-000000000001")
                        },
                        new
                        {
                            UserId = new Guid("00000000-0000-0000-0000-000000000006"),
                            RoleId = new Guid("00000000-0000-0000-0000-000000000002")
                        },
                        new
                        {
                            UserId = new Guid("00000000-0000-0000-0000-000000000007"),
                            RoleId = new Guid("00000000-0000-0000-0000-000000000002")
                        },
                        new
                        {
                            UserId = new Guid("00000000-0000-0000-0000-000000000008"),
                            RoleId = new Guid("00000000-0000-0000-0000-000000000002")
                        },
                        new
                        {
                            UserId = new Guid("00000000-0000-0000-0000-000000000009"),
                            RoleId = new Guid("00000000-0000-0000-0000-000000000002")
                        },
                        new
                        {
                            UserId = new Guid("00000000-0000-0000-0000-000000000010"),
                            RoleId = new Guid("00000000-0000-0000-0000-000000000002")
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<System.Guid>", b =>
                {
                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("Imi.Project.Api.Core.Entities.Game", b =>
                {
                    b.HasOne("Imi.Project.Api.Core.Entities.Publisher", "Publisher")
                        .WithMany("Games")
                        .HasForeignKey("PublisherId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Publisher");
                });

            modelBuilder.Entity("Imi.Project.Api.Core.Entities.GameGenre", b =>
                {
                    b.HasOne("Imi.Project.Api.Core.Entities.Game", "Game")
                        .WithMany()
                        .HasForeignKey("GameId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Imi.Project.Api.Core.Entities.Genre", "Genre")
                        .WithMany()
                        .HasForeignKey("GenreId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Game");

                    b.Navigation("Genre");
                });

            modelBuilder.Entity("Imi.Project.Api.Core.Entities.UserGame", b =>
                {
                    b.HasOne("Imi.Project.Api.Core.Entities.Game", "Game")
                        .WithMany()
                        .HasForeignKey("GameId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Imi.Project.Api.Core.Entities.ApplicationUser", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Game");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<System.Guid>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole<System.Guid>", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<System.Guid>", b =>
                {
                    b.HasOne("Imi.Project.Api.Core.Entities.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<System.Guid>", b =>
                {
                    b.HasOne("Imi.Project.Api.Core.Entities.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<System.Guid>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole<System.Guid>", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Imi.Project.Api.Core.Entities.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<System.Guid>", b =>
                {
                    b.HasOne("Imi.Project.Api.Core.Entities.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Imi.Project.Api.Core.Entities.Publisher", b =>
                {
                    b.Navigation("Games");
                });
#pragma warning restore 612, 618
        }
    }
}
